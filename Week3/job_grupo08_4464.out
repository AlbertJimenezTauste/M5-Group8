Metadata(name='MOTSChallenge_train', thing_classes=['None', 'Car', 'Pedestrian'])
Loading sequence 0002
Loading sequence 0005
Loading sequence 0009
Loading sequence 0011
0002
0005
0009
0011
Loaded 2004 images!
[32m[03/14 21:09:06 d2.engine.defaults]: [0mModel:
RetinaNet(
  (backbone): FPN(
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelP6P7(
      (p6): Conv2d(2048, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (p7): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    )
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (head): RetinaNetHead(
    (cls_subnet): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
      (4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): ReLU()
      (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (7): ReLU()
    )
    (bbox_subnet): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
      (4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): ReLU()
      (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (7): ReLU()
    )
    (cls_score): Conv2d(256, 720, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (bbox_pred): Conv2d(256, 36, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (anchor_generator): DefaultAnchorGenerator(
    (cell_anchors): BufferList()
  )
)
Loading sequence 0002
Loading sequence 0005
Loading sequence 0009
Loading sequence 0011
0002
0005
0009
0011
Loaded 2004 images!
[32m[03/14 21:11:31 d2.data.build]: [0mRemoved 0 images with no usable annotations. 2004 images left.
[32m[03/14 21:11:31 d2.data.build]: [0mDistribution of instances among all 3 categories:
[36m|  category  | #instances   |  category  | #instances   |  category  | #instances   |
|:----------:|:-------------|:----------:|:-------------|:----------:|:-------------|
|    None    | 0            |    Car     | 0            | Pedestrian | 18817        |
|            |              |            |              |            |              |
|   total    | 18817        |            |              |            |              |[0m
[32m[03/14 21:11:31 d2.data.common]: [0mSerializing 2004 elements to byte tensors and concatenating them all ...
[32m[03/14 21:11:31 d2.data.common]: [0mSerialized dataset takes 2.29 MiB
[32m[03/14 21:11:31 d2.data.detection_utils]: [0mTransformGens used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[32m[03/14 21:11:31 d2.data.build]: [0mUsing training sampler TrainingSampler
[32m[03/14 21:11:55 d2.engine.train_loop]: [0mStarting training from iteration 0
[32m[03/14 21:12:06 d2.utils.events]: [0m eta: 0:36:24  iter: 19  total_loss: 2.617  loss_cls: 2.459  loss_box_reg: 0.156  time: 0.4307  data_time: 0.0234  lr: 0.000005  max_mem: 4671M
[32m[03/14 21:12:15 d2.utils.events]: [0m eta: 0:37:35  iter: 39  total_loss: 1.634  loss_cls: 1.526  loss_box_reg: 0.089  time: 0.4348  data_time: 0.0054  lr: 0.000010  max_mem: 4836M
[32m[03/14 21:12:23 d2.utils.events]: [0m eta: 0:37:13  iter: 59  total_loss: 1.067  loss_cls: 0.941  loss_box_reg: 0.115  time: 0.4347  data_time: 0.0051  lr: 0.000015  max_mem: 4836M
[32m[03/14 21:12:34 d2.utils.events]: [0m eta: 0:37:00  iter: 79  total_loss: 0.717  loss_cls: 0.635  loss_box_reg: 0.101  time: 0.4538  data_time: 0.0051  lr: 0.000020  max_mem: 4836M
[32m[03/14 21:12:43 d2.utils.events]: [0m eta: 0:36:32  iter: 99  total_loss: 0.532  loss_cls: 0.403  loss_box_reg: 0.131  time: 0.4489  data_time: 0.0051  lr: 0.000025  max_mem: 4836M
[32m[03/14 21:12:52 d2.utils.events]: [0m eta: 0:36:17  iter: 119  total_loss: 0.419  loss_cls: 0.281  loss_box_reg: 0.105  time: 0.4449  data_time: 0.0052  lr: 0.000030  max_mem: 4836M
[32m[03/14 21:13:02 d2.utils.events]: [0m eta: 0:35:53  iter: 139  total_loss: 0.311  loss_cls: 0.222  loss_box_reg: 0.080  time: 0.4506  data_time: 0.0048  lr: 0.000035  max_mem: 4836M
[32m[03/14 21:13:10 d2.utils.events]: [0m eta: 0:35:40  iter: 159  total_loss: 0.348  loss_cls: 0.245  loss_box_reg: 0.106  time: 0.4470  data_time: 0.0049  lr: 0.000040  max_mem: 4836M
[32m[03/14 21:13:19 d2.utils.events]: [0m eta: 0:35:34  iter: 179  total_loss: 0.313  loss_cls: 0.199  loss_box_reg: 0.097  time: 0.4462  data_time: 0.0046  lr: 0.000045  max_mem: 4836M
[32m[03/14 21:13:28 d2.utils.events]: [0m eta: 0:35:31  iter: 199  total_loss: 0.249  loss_cls: 0.159  loss_box_reg: 0.082  time: 0.4460  data_time: 0.0047  lr: 0.000050  max_mem: 4836M
[32m[03/14 21:13:37 d2.utils.events]: [0m eta: 0:35:34  iter: 219  total_loss: 0.248  loss_cls: 0.167  loss_box_reg: 0.098  time: 0.4462  data_time: 0.0047  lr: 0.000055  max_mem: 4836M
[32m[03/14 21:13:46 d2.utils.events]: [0m eta: 0:35:26  iter: 239  total_loss: 0.244  loss_cls: 0.166  loss_box_reg: 0.088  time: 0.4456  data_time: 0.0047  lr: 0.000060  max_mem: 4838M
[32m[03/14 21:13:55 d2.utils.events]: [0m eta: 0:35:20  iter: 259  total_loss: 0.260  loss_cls: 0.158  loss_box_reg: 0.094  time: 0.4457  data_time: 0.0046  lr: 0.000065  max_mem: 4838M
[32m[03/14 21:14:04 d2.utils.events]: [0m eta: 0:35:16  iter: 279  total_loss: 0.281  loss_cls: 0.173  loss_box_reg: 0.104  time: 0.4454  data_time: 0.0049  lr: 0.000070  max_mem: 4838M
[32m[03/14 21:14:13 d2.utils.events]: [0m eta: 0:35:13  iter: 299  total_loss: 0.250  loss_cls: 0.154  loss_box_reg: 0.084  time: 0.4456  data_time: 0.0041  lr: 0.000075  max_mem: 4838M
[32m[03/14 21:14:22 d2.utils.events]: [0m eta: 0:35:11  iter: 319  total_loss: 0.282  loss_cls: 0.176  loss_box_reg: 0.111  time: 0.4456  data_time: 0.0044  lr: 0.000080  max_mem: 4838M
[32m[03/14 21:14:30 d2.utils.events]: [0m eta: 0:35:01  iter: 339  total_loss: 0.219  loss_cls: 0.136  loss_box_reg: 0.092  time: 0.4452  data_time: 0.0043  lr: 0.000085  max_mem: 4838M
[32m[03/14 21:14:39 d2.utils.events]: [0m eta: 0:34:53  iter: 359  total_loss: 0.237  loss_cls: 0.141  loss_box_reg: 0.083  time: 0.4451  data_time: 0.0043  lr: 0.000090  max_mem: 4838M
[32m[03/14 21:14:48 d2.utils.events]: [0m eta: 0:34:47  iter: 379  total_loss: 0.200  loss_cls: 0.123  loss_box_reg: 0.084  time: 0.4452  data_time: 0.0047  lr: 0.000095  max_mem: 4838M
[32m[03/14 21:14:57 d2.utils.events]: [0m eta: 0:34:40  iter: 399  total_loss: 0.194  loss_cls: 0.118  loss_box_reg: 0.078  time: 0.4459  data_time: 0.0043  lr: 0.000100  max_mem: 4838M
[32m[03/14 21:15:07 d2.utils.events]: [0m eta: 0:34:35  iter: 419  total_loss: 0.220  loss_cls: 0.136  loss_box_reg: 0.082  time: 0.4465  data_time: 0.0047  lr: 0.000105  max_mem: 4838M
[32m[03/14 21:15:16 d2.utils.events]: [0m eta: 0:34:31  iter: 439  total_loss: 0.203  loss_cls: 0.121  loss_box_reg: 0.081  time: 0.4466  data_time: 0.0046  lr: 0.000110  max_mem: 4838M
[32m[03/14 21:15:25 d2.utils.events]: [0m eta: 0:34:22  iter: 459  total_loss: 0.226  loss_cls: 0.125  loss_box_reg: 0.096  time: 0.4468  data_time: 0.0044  lr: 0.000115  max_mem: 4838M
[32m[03/14 21:15:34 d2.utils.events]: [0m eta: 0:34:13  iter: 479  total_loss: 0.202  loss_cls: 0.129  loss_box_reg: 0.086  time: 0.4471  data_time: 0.0046  lr: 0.000120  max_mem: 4838M
[32m[03/14 21:15:43 d2.utils.events]: [0m eta: 0:34:06  iter: 499  total_loss: 0.203  loss_cls: 0.113  loss_box_reg: 0.083  time: 0.4476  data_time: 0.0044  lr: 0.000125  max_mem: 4838M
[32m[03/14 21:15:52 d2.utils.events]: [0m eta: 0:33:57  iter: 519  total_loss: 0.188  loss_cls: 0.111  loss_box_reg: 0.078  time: 0.4473  data_time: 0.0047  lr: 0.000130  max_mem: 4838M
[32m[03/14 21:16:01 d2.utils.events]: [0m eta: 0:33:50  iter: 539  total_loss: 0.192  loss_cls: 0.104  loss_box_reg: 0.083  time: 0.4475  data_time: 0.0045  lr: 0.000135  max_mem: 4838M
[32m[03/14 21:16:10 d2.utils.events]: [0m eta: 0:33:41  iter: 559  total_loss: 0.184  loss_cls: 0.103  loss_box_reg: 0.078  time: 0.4477  data_time: 0.0051  lr: 0.000140  max_mem: 4838M
[32m[03/14 21:16:19 d2.utils.events]: [0m eta: 0:33:36  iter: 579  total_loss: 0.160  loss_cls: 0.099  loss_box_reg: 0.067  time: 0.4486  data_time: 0.0048  lr: 0.000145  max_mem: 4838M
[32m[03/14 21:16:28 d2.utils.events]: [0m eta: 0:33:30  iter: 599  total_loss: 0.217  loss_cls: 0.120  loss_box_reg: 0.090  time: 0.4486  data_time: 0.0046  lr: 0.000150  max_mem: 4838M
[32m[03/14 21:16:38 d2.utils.events]: [0m eta: 0:33:23  iter: 619  total_loss: 0.199  loss_cls: 0.116  loss_box_reg: 0.084  time: 0.4495  data_time: 0.0047  lr: 0.000155  max_mem: 4838M
[32m[03/14 21:16:47 d2.utils.events]: [0m eta: 0:33:14  iter: 639  total_loss: 0.171  loss_cls: 0.102  loss_box_reg: 0.073  time: 0.4493  data_time: 0.0045  lr: 0.000160  max_mem: 4838M
[32m[03/14 21:16:56 d2.utils.events]: [0m eta: 0:33:06  iter: 659  total_loss: 0.240  loss_cls: 0.120  loss_box_reg: 0.099  time: 0.4499  data_time: 0.0045  lr: 0.000165  max_mem: 4838M
[32m[03/14 21:17:06 d2.utils.events]: [0m eta: 0:32:58  iter: 679  total_loss: 0.161  loss_cls: 0.099  loss_box_reg: 0.060  time: 0.4504  data_time: 0.0044  lr: 0.000170  max_mem: 4838M
[32m[03/14 21:17:14 d2.utils.events]: [0m eta: 0:32:48  iter: 699  total_loss: 0.167  loss_cls: 0.102  loss_box_reg: 0.069  time: 0.4500  data_time: 0.0046  lr: 0.000175  max_mem: 4838M
[32m[03/14 21:17:23 d2.utils.events]: [0m eta: 0:32:39  iter: 719  total_loss: 0.218  loss_cls: 0.126  loss_box_reg: 0.097  time: 0.4496  data_time: 0.0051  lr: 0.000180  max_mem: 4838M
[32m[03/14 21:17:32 d2.utils.events]: [0m eta: 0:32:31  iter: 739  total_loss: 0.196  loss_cls: 0.122  loss_box_reg: 0.077  time: 0.4499  data_time: 0.0047  lr: 0.000185  max_mem: 4838M
[32m[03/14 21:17:42 d2.utils.events]: [0m eta: 0:32:22  iter: 759  total_loss: 0.173  loss_cls: 0.106  loss_box_reg: 0.073  time: 0.4502  data_time: 0.0048  lr: 0.000190  max_mem: 4838M
[32m[03/14 21:17:50 d2.utils.events]: [0m eta: 0:32:13  iter: 779  total_loss: 0.162  loss_cls: 0.098  loss_box_reg: 0.066  time: 0.4500  data_time: 0.0047  lr: 0.000195  max_mem: 4838M
[32m[03/14 21:17:59 d2.utils.events]: [0m eta: 0:32:04  iter: 799  total_loss: 0.188  loss_cls: 0.107  loss_box_reg: 0.084  time: 0.4498  data_time: 0.0049  lr: 0.000200  max_mem: 4838M
[32m[03/14 21:18:08 d2.utils.events]: [0m eta: 0:31:56  iter: 819  total_loss: 0.177  loss_cls: 0.104  loss_box_reg: 0.062  time: 0.4500  data_time: 0.0049  lr: 0.000205  max_mem: 4838M
[32m[03/14 21:18:18 d2.utils.events]: [0m eta: 0:31:47  iter: 839  total_loss: 0.207  loss_cls: 0.111  loss_box_reg: 0.090  time: 0.4502  data_time: 0.0047  lr: 0.000210  max_mem: 4838M
[32m[03/14 21:18:27 d2.utils.events]: [0m eta: 0:31:38  iter: 859  total_loss: 0.170  loss_cls: 0.089  loss_box_reg: 0.083  time: 0.4503  data_time: 0.0049  lr: 0.000215  max_mem: 4838M
[32m[03/14 21:18:36 d2.utils.events]: [0m eta: 0:31:29  iter: 879  total_loss: 0.212  loss_cls: 0.113  loss_box_reg: 0.097  time: 0.4503  data_time: 0.0045  lr: 0.000220  max_mem: 4838M
[32m[03/14 21:18:45 d2.utils.events]: [0m eta: 0:31:21  iter: 899  total_loss: 0.182  loss_cls: 0.097  loss_box_reg: 0.080  time: 0.4508  data_time: 0.0046  lr: 0.000225  max_mem: 4838M
[32m[03/14 21:18:54 d2.utils.events]: [0m eta: 0:31:11  iter: 919  total_loss: 0.164  loss_cls: 0.093  loss_box_reg: 0.073  time: 0.4507  data_time: 0.0045  lr: 0.000230  max_mem: 4838M
[32m[03/14 21:19:03 d2.utils.events]: [0m eta: 0:31:03  iter: 939  total_loss: 0.161  loss_cls: 0.088  loss_box_reg: 0.066  time: 0.4508  data_time: 0.0045  lr: 0.000235  max_mem: 4838M
[32m[03/14 21:19:12 d2.utils.events]: [0m eta: 0:30:54  iter: 959  total_loss: 0.174  loss_cls: 0.105  loss_box_reg: 0.077  time: 0.4507  data_time: 0.0048  lr: 0.000240  max_mem: 4838M
[32m[03/14 21:19:21 d2.utils.events]: [0m eta: 0:30:46  iter: 979  total_loss: 0.167  loss_cls: 0.093  loss_box_reg: 0.076  time: 0.4509  data_time: 0.0048  lr: 0.000245  max_mem: 4838M
[32m[03/14 21:19:30 d2.utils.events]: [0m eta: 0:30:36  iter: 999  total_loss: 0.178  loss_cls: 0.094  loss_box_reg: 0.083  time: 0.4509  data_time: 0.0049  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:19:40 d2.utils.events]: [0m eta: 0:30:28  iter: 1019  total_loss: 0.184  loss_cls: 0.098  loss_box_reg: 0.081  time: 0.4510  data_time: 0.0049  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:19:48 d2.utils.events]: [0m eta: 0:30:19  iter: 1039  total_loss: 0.200  loss_cls: 0.116  loss_box_reg: 0.090  time: 0.4510  data_time: 0.0046  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:19:58 d2.utils.events]: [0m eta: 0:30:11  iter: 1059  total_loss: 0.182  loss_cls: 0.098  loss_box_reg: 0.066  time: 0.4514  data_time: 0.0052  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:20:07 d2.utils.events]: [0m eta: 0:30:04  iter: 1079  total_loss: 0.171  loss_cls: 0.096  loss_box_reg: 0.078  time: 0.4517  data_time: 0.0045  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:20:17 d2.utils.events]: [0m eta: 0:29:56  iter: 1099  total_loss: 0.167  loss_cls: 0.087  loss_box_reg: 0.078  time: 0.4519  data_time: 0.0046  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:20:26 d2.utils.events]: [0m eta: 0:29:47  iter: 1119  total_loss: 0.156  loss_cls: 0.080  loss_box_reg: 0.075  time: 0.4518  data_time: 0.0044  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:20:35 d2.utils.events]: [0m eta: 0:29:39  iter: 1139  total_loss: 0.163  loss_cls: 0.077  loss_box_reg: 0.064  time: 0.4518  data_time: 0.0041  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:20:44 d2.utils.events]: [0m eta: 0:29:33  iter: 1159  total_loss: 0.169  loss_cls: 0.088  loss_box_reg: 0.079  time: 0.4521  data_time: 0.0046  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:20:53 d2.utils.events]: [0m eta: 0:29:24  iter: 1179  total_loss: 0.143  loss_cls: 0.082  loss_box_reg: 0.065  time: 0.4521  data_time: 0.0043  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:21:02 d2.utils.events]: [0m eta: 0:29:15  iter: 1199  total_loss: 0.163  loss_cls: 0.087  loss_box_reg: 0.074  time: 0.4521  data_time: 0.0047  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:21:11 d2.utils.events]: [0m eta: 0:29:07  iter: 1219  total_loss: 0.163  loss_cls: 0.087  loss_box_reg: 0.081  time: 0.4523  data_time: 0.0045  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:21:20 d2.utils.events]: [0m eta: 0:28:58  iter: 1239  total_loss: 0.164  loss_cls: 0.089  loss_box_reg: 0.072  time: 0.4522  data_time: 0.0050  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:21:29 d2.utils.events]: [0m eta: 0:28:50  iter: 1259  total_loss: 0.165  loss_cls: 0.089  loss_box_reg: 0.074  time: 0.4522  data_time: 0.0046  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:21:38 d2.utils.events]: [0m eta: 0:28:41  iter: 1279  total_loss: 0.164  loss_cls: 0.094  loss_box_reg: 0.073  time: 0.4522  data_time: 0.0053  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:21:48 d2.utils.events]: [0m eta: 0:28:32  iter: 1299  total_loss: 0.162  loss_cls: 0.091  loss_box_reg: 0.066  time: 0.4521  data_time: 0.0042  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:21:56 d2.utils.events]: [0m eta: 0:28:23  iter: 1319  total_loss: 0.151  loss_cls: 0.083  loss_box_reg: 0.064  time: 0.4519  data_time: 0.0044  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:22:06 d2.utils.events]: [0m eta: 0:28:14  iter: 1339  total_loss: 0.176  loss_cls: 0.107  loss_box_reg: 0.083  time: 0.4520  data_time: 0.0045  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:22:15 d2.utils.events]: [0m eta: 0:28:05  iter: 1359  total_loss: 0.129  loss_cls: 0.070  loss_box_reg: 0.057  time: 0.4520  data_time: 0.0046  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:22:24 d2.utils.events]: [0m eta: 0:27:58  iter: 1379  total_loss: 0.158  loss_cls: 0.086  loss_box_reg: 0.074  time: 0.4523  data_time: 0.0049  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:22:33 d2.utils.events]: [0m eta: 0:27:51  iter: 1399  total_loss: 0.119  loss_cls: 0.064  loss_box_reg: 0.051  time: 0.4525  data_time: 0.0050  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:22:42 d2.utils.events]: [0m eta: 0:27:40  iter: 1419  total_loss: 0.167  loss_cls: 0.085  loss_box_reg: 0.075  time: 0.4523  data_time: 0.0048  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:22:51 d2.utils.events]: [0m eta: 0:27:33  iter: 1439  total_loss: 0.147  loss_cls: 0.079  loss_box_reg: 0.068  time: 0.4524  data_time: 0.0047  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:23:01 d2.utils.events]: [0m eta: 0:27:26  iter: 1459  total_loss: 0.168  loss_cls: 0.087  loss_box_reg: 0.080  time: 0.4525  data_time: 0.0045  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:23:10 d2.utils.events]: [0m eta: 0:27:16  iter: 1479  total_loss: 0.165  loss_cls: 0.081  loss_box_reg: 0.079  time: 0.4525  data_time: 0.0046  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:23:19 d2.utils.events]: [0m eta: 0:27:05  iter: 1499  total_loss: 0.143  loss_cls: 0.082  loss_box_reg: 0.062  time: 0.4524  data_time: 0.0043  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:23:28 d2.utils.events]: [0m eta: 0:27:00  iter: 1519  total_loss: 0.143  loss_cls: 0.081  loss_box_reg: 0.066  time: 0.4528  data_time: 0.0048  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:23:37 d2.utils.events]: [0m eta: 0:26:48  iter: 1539  total_loss: 0.143  loss_cls: 0.084  loss_box_reg: 0.061  time: 0.4527  data_time: 0.0042  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:23:46 d2.utils.events]: [0m eta: 0:26:38  iter: 1559  total_loss: 0.154  loss_cls: 0.081  loss_box_reg: 0.079  time: 0.4527  data_time: 0.0043  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:23:55 d2.utils.events]: [0m eta: 0:26:28  iter: 1579  total_loss: 0.144  loss_cls: 0.084  loss_box_reg: 0.063  time: 0.4527  data_time: 0.0038  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:24:04 d2.utils.events]: [0m eta: 0:26:17  iter: 1599  total_loss: 0.153  loss_cls: 0.086  loss_box_reg: 0.068  time: 0.4527  data_time: 0.0040  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:24:13 d2.utils.events]: [0m eta: 0:26:05  iter: 1619  total_loss: 0.125  loss_cls: 0.074  loss_box_reg: 0.054  time: 0.4527  data_time: 0.0040  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:24:22 d2.utils.events]: [0m eta: 0:25:56  iter: 1639  total_loss: 0.140  loss_cls: 0.075  loss_box_reg: 0.063  time: 0.4527  data_time: 0.0040  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:24:31 d2.utils.events]: [0m eta: 0:25:46  iter: 1659  total_loss: 0.168  loss_cls: 0.086  loss_box_reg: 0.074  time: 0.4526  data_time: 0.0038  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:24:41 d2.utils.events]: [0m eta: 0:25:36  iter: 1679  total_loss: 0.177  loss_cls: 0.085  loss_box_reg: 0.083  time: 0.4527  data_time: 0.0040  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:24:50 d2.utils.events]: [0m eta: 0:25:30  iter: 1699  total_loss: 0.149  loss_cls: 0.073  loss_box_reg: 0.066  time: 0.4530  data_time: 0.0047  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:24:59 d2.utils.events]: [0m eta: 0:25:21  iter: 1719  total_loss: 0.144  loss_cls: 0.080  loss_box_reg: 0.060  time: 0.4529  data_time: 0.0042  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:25:08 d2.utils.events]: [0m eta: 0:25:11  iter: 1739  total_loss: 0.146  loss_cls: 0.085  loss_box_reg: 0.069  time: 0.4528  data_time: 0.0038  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:25:17 d2.utils.events]: [0m eta: 0:25:01  iter: 1759  total_loss: 0.133  loss_cls: 0.070  loss_box_reg: 0.064  time: 0.4527  data_time: 0.0042  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:25:26 d2.utils.events]: [0m eta: 0:24:52  iter: 1779  total_loss: 0.136  loss_cls: 0.074  loss_box_reg: 0.060  time: 0.4527  data_time: 0.0043  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:25:35 d2.utils.events]: [0m eta: 0:24:43  iter: 1799  total_loss: 0.125  loss_cls: 0.070  loss_box_reg: 0.057  time: 0.4526  data_time: 0.0044  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:25:44 d2.utils.events]: [0m eta: 0:24:31  iter: 1819  total_loss: 0.120  loss_cls: 0.062  loss_box_reg: 0.057  time: 0.4524  data_time: 0.0043  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:25:53 d2.utils.events]: [0m eta: 0:24:23  iter: 1839  total_loss: 0.142  loss_cls: 0.080  loss_box_reg: 0.059  time: 0.4526  data_time: 0.0043  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:26:02 d2.utils.events]: [0m eta: 0:24:13  iter: 1859  total_loss: 0.114  loss_cls: 0.066  loss_box_reg: 0.054  time: 0.4528  data_time: 0.0039  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:26:11 d2.utils.events]: [0m eta: 0:24:05  iter: 1879  total_loss: 0.132  loss_cls: 0.078  loss_box_reg: 0.058  time: 0.4528  data_time: 0.0038  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:26:21 d2.utils.events]: [0m eta: 0:23:55  iter: 1899  total_loss: 0.159  loss_cls: 0.093  loss_box_reg: 0.074  time: 0.4528  data_time: 0.0042  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:26:30 d2.utils.events]: [0m eta: 0:23:47  iter: 1919  total_loss: 0.160  loss_cls: 0.090  loss_box_reg: 0.074  time: 0.4530  data_time: 0.0042  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:26:39 d2.utils.events]: [0m eta: 0:23:38  iter: 1939  total_loss: 0.124  loss_cls: 0.066  loss_box_reg: 0.059  time: 0.4530  data_time: 0.0044  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:26:48 d2.utils.events]: [0m eta: 0:23:29  iter: 1959  total_loss: 0.127  loss_cls: 0.063  loss_box_reg: 0.063  time: 0.4530  data_time: 0.0048  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:26:57 d2.utils.events]: [0m eta: 0:23:19  iter: 1979  total_loss: 0.139  loss_cls: 0.074  loss_box_reg: 0.057  time: 0.4530  data_time: 0.0045  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:27:06 d2.utils.events]: [0m eta: 0:23:10  iter: 1999  total_loss: 0.122  loss_cls: 0.062  loss_box_reg: 0.054  time: 0.4530  data_time: 0.0044  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:27:15 d2.utils.events]: [0m eta: 0:23:01  iter: 2019  total_loss: 0.150  loss_cls: 0.080  loss_box_reg: 0.060  time: 0.4530  data_time: 0.0045  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:27:25 d2.utils.events]: [0m eta: 0:22:52  iter: 2039  total_loss: 0.137  loss_cls: 0.071  loss_box_reg: 0.059  time: 0.4531  data_time: 0.0042  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:27:34 d2.utils.events]: [0m eta: 0:22:42  iter: 2059  total_loss: 0.117  loss_cls: 0.064  loss_box_reg: 0.058  time: 0.4532  data_time: 0.0043  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:27:43 d2.utils.events]: [0m eta: 0:22:33  iter: 2079  total_loss: 0.120  loss_cls: 0.065  loss_box_reg: 0.054  time: 0.4533  data_time: 0.0048  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:27:52 d2.utils.events]: [0m eta: 0:22:23  iter: 2099  total_loss: 0.150  loss_cls: 0.082  loss_box_reg: 0.066  time: 0.4533  data_time: 0.0045  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:28:02 d2.utils.events]: [0m eta: 0:22:15  iter: 2119  total_loss: 0.142  loss_cls: 0.075  loss_box_reg: 0.064  time: 0.4534  data_time: 0.0045  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:28:10 d2.utils.events]: [0m eta: 0:22:06  iter: 2139  total_loss: 0.178  loss_cls: 0.090  loss_box_reg: 0.073  time: 0.4533  data_time: 0.0050  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:28:20 d2.utils.events]: [0m eta: 0:21:56  iter: 2159  total_loss: 0.157  loss_cls: 0.080  loss_box_reg: 0.070  time: 0.4534  data_time: 0.0045  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:28:29 d2.utils.events]: [0m eta: 0:21:48  iter: 2179  total_loss: 0.133  loss_cls: 0.068  loss_box_reg: 0.062  time: 0.4535  data_time: 0.0051  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:28:38 d2.utils.events]: [0m eta: 0:21:39  iter: 2199  total_loss: 0.127  loss_cls: 0.068  loss_box_reg: 0.062  time: 0.4534  data_time: 0.0043  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:28:47 d2.utils.events]: [0m eta: 0:21:29  iter: 2219  total_loss: 0.140  loss_cls: 0.075  loss_box_reg: 0.075  time: 0.4534  data_time: 0.0042  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:28:56 d2.utils.events]: [0m eta: 0:21:21  iter: 2239  total_loss: 0.135  loss_cls: 0.076  loss_box_reg: 0.066  time: 0.4535  data_time: 0.0045  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:29:05 d2.utils.events]: [0m eta: 0:21:11  iter: 2259  total_loss: 0.124  loss_cls: 0.061  loss_box_reg: 0.057  time: 0.4536  data_time: 0.0042  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:29:15 d2.utils.events]: [0m eta: 0:21:03  iter: 2279  total_loss: 0.150  loss_cls: 0.073  loss_box_reg: 0.063  time: 0.4537  data_time: 0.0043  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:29:24 d2.utils.events]: [0m eta: 0:20:56  iter: 2299  total_loss: 0.141  loss_cls: 0.073  loss_box_reg: 0.065  time: 0.4538  data_time: 0.0042  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:29:33 d2.utils.events]: [0m eta: 0:20:47  iter: 2319  total_loss: 0.139  loss_cls: 0.071  loss_box_reg: 0.067  time: 0.4538  data_time: 0.0045  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:29:43 d2.utils.events]: [0m eta: 0:20:38  iter: 2339  total_loss: 0.138  loss_cls: 0.070  loss_box_reg: 0.062  time: 0.4539  data_time: 0.0042  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:29:51 d2.utils.events]: [0m eta: 0:20:27  iter: 2359  total_loss: 0.129  loss_cls: 0.075  loss_box_reg: 0.055  time: 0.4537  data_time: 0.0044  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:30:00 d2.utils.events]: [0m eta: 0:20:16  iter: 2379  total_loss: 0.115  loss_cls: 0.066  loss_box_reg: 0.052  time: 0.4536  data_time: 0.0042  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:30:09 d2.utils.events]: [0m eta: 0:20:08  iter: 2399  total_loss: 0.140  loss_cls: 0.074  loss_box_reg: 0.063  time: 0.4537  data_time: 0.0043  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:30:19 d2.utils.events]: [0m eta: 0:19:58  iter: 2419  total_loss: 0.112  loss_cls: 0.062  loss_box_reg: 0.052  time: 0.4538  data_time: 0.0043  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:30:28 d2.utils.events]: [0m eta: 0:19:49  iter: 2439  total_loss: 0.128  loss_cls: 0.064  loss_box_reg: 0.061  time: 0.4538  data_time: 0.0042  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:30:37 d2.utils.events]: [0m eta: 0:19:40  iter: 2459  total_loss: 0.138  loss_cls: 0.075  loss_box_reg: 0.061  time: 0.4539  data_time: 0.0045  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:30:46 d2.utils.events]: [0m eta: 0:19:32  iter: 2479  total_loss: 0.126  loss_cls: 0.066  loss_box_reg: 0.064  time: 0.4540  data_time: 0.0040  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:30:56 d2.utils.events]: [0m eta: 0:19:23  iter: 2499  total_loss: 0.117  loss_cls: 0.066  loss_box_reg: 0.056  time: 0.4541  data_time: 0.0045  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:31:05 d2.utils.events]: [0m eta: 0:19:13  iter: 2519  total_loss: 0.144  loss_cls: 0.081  loss_box_reg: 0.071  time: 0.4540  data_time: 0.0044  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:31:14 d2.utils.events]: [0m eta: 0:19:05  iter: 2539  total_loss: 0.140  loss_cls: 0.077  loss_box_reg: 0.064  time: 0.4540  data_time: 0.0043  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:31:23 d2.utils.events]: [0m eta: 0:18:56  iter: 2559  total_loss: 0.115  loss_cls: 0.067  loss_box_reg: 0.054  time: 0.4542  data_time: 0.0044  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:31:32 d2.utils.events]: [0m eta: 0:18:46  iter: 2579  total_loss: 0.135  loss_cls: 0.068  loss_box_reg: 0.066  time: 0.4541  data_time: 0.0044  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:31:41 d2.utils.events]: [0m eta: 0:18:37  iter: 2599  total_loss: 0.129  loss_cls: 0.068  loss_box_reg: 0.060  time: 0.4542  data_time: 0.0045  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:31:51 d2.utils.events]: [0m eta: 0:18:28  iter: 2619  total_loss: 0.147  loss_cls: 0.080  loss_box_reg: 0.057  time: 0.4542  data_time: 0.0046  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:32:00 d2.utils.events]: [0m eta: 0:18:19  iter: 2639  total_loss: 0.125  loss_cls: 0.066  loss_box_reg: 0.056  time: 0.4543  data_time: 0.0048  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:32:09 d2.utils.events]: [0m eta: 0:18:12  iter: 2659  total_loss: 0.124  loss_cls: 0.061  loss_box_reg: 0.063  time: 0.4544  data_time: 0.0045  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:32:18 d2.utils.events]: [0m eta: 0:18:03  iter: 2679  total_loss: 0.123  loss_cls: 0.070  loss_box_reg: 0.057  time: 0.4543  data_time: 0.0043  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:32:28 d2.utils.events]: [0m eta: 0:17:53  iter: 2699  total_loss: 0.131  loss_cls: 0.070  loss_box_reg: 0.058  time: 0.4545  data_time: 0.0044  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:32:37 d2.utils.events]: [0m eta: 0:17:43  iter: 2719  total_loss: 0.150  loss_cls: 0.078  loss_box_reg: 0.067  time: 0.4544  data_time: 0.0042  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:32:46 d2.utils.events]: [0m eta: 0:17:34  iter: 2739  total_loss: 0.148  loss_cls: 0.074  loss_box_reg: 0.064  time: 0.4545  data_time: 0.0042  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:32:55 d2.utils.events]: [0m eta: 0:17:25  iter: 2759  total_loss: 0.110  loss_cls: 0.059  loss_box_reg: 0.053  time: 0.4546  data_time: 0.0041  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:33:04 d2.utils.events]: [0m eta: 0:17:16  iter: 2779  total_loss: 0.135  loss_cls: 0.077  loss_box_reg: 0.060  time: 0.4545  data_time: 0.0039  lr: 0.000250  max_mem: 4838M
[32m[03/14 21:33:13 d2.utils.events]: [0m eta: 0:17:07  iter: 2799  total_loss: 0.140  loss_cls: 0.077  loss_box_reg: 0.057  time: 0.4545  data_time: 0.0040  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:33:23 d2.utils.events]: [0m eta: 0:16:59  iter: 2819  total_loss: 0.135  loss_cls: 0.080  loss_box_reg: 0.056  time: 0.4545  data_time: 0.0042  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:33:32 d2.utils.events]: [0m eta: 0:16:50  iter: 2839  total_loss: 0.143  loss_cls: 0.080  loss_box_reg: 0.062  time: 0.4546  data_time: 0.0041  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:33:41 d2.utils.events]: [0m eta: 0:16:40  iter: 2859  total_loss: 0.112  loss_cls: 0.061  loss_box_reg: 0.052  time: 0.4546  data_time: 0.0050  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:33:50 d2.utils.events]: [0m eta: 0:16:31  iter: 2879  total_loss: 0.107  loss_cls: 0.056  loss_box_reg: 0.054  time: 0.4547  data_time: 0.0048  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:33:59 d2.utils.events]: [0m eta: 0:16:21  iter: 2899  total_loss: 0.143  loss_cls: 0.081  loss_box_reg: 0.063  time: 0.4547  data_time: 0.0046  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:34:09 d2.utils.events]: [0m eta: 0:16:12  iter: 2919  total_loss: 0.106  loss_cls: 0.058  loss_box_reg: 0.050  time: 0.4547  data_time: 0.0042  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:34:18 d2.utils.events]: [0m eta: 0:16:03  iter: 2939  total_loss: 0.119  loss_cls: 0.062  loss_box_reg: 0.053  time: 0.4548  data_time: 0.0046  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:34:27 d2.utils.events]: [0m eta: 0:15:53  iter: 2959  total_loss: 0.151  loss_cls: 0.076  loss_box_reg: 0.070  time: 0.4548  data_time: 0.0040  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:34:36 d2.utils.events]: [0m eta: 0:15:45  iter: 2979  total_loss: 0.145  loss_cls: 0.071  loss_box_reg: 0.073  time: 0.4549  data_time: 0.0048  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:34:46 d2.utils.events]: [0m eta: 0:15:36  iter: 2999  total_loss: 0.138  loss_cls: 0.073  loss_box_reg: 0.060  time: 0.4550  data_time: 0.0042  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:34:55 d2.utils.events]: [0m eta: 0:15:26  iter: 3019  total_loss: 0.100  loss_cls: 0.053  loss_box_reg: 0.047  time: 0.4550  data_time: 0.0044  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:35:04 d2.utils.events]: [0m eta: 0:15:17  iter: 3039  total_loss: 0.117  loss_cls: 0.063  loss_box_reg: 0.053  time: 0.4551  data_time: 0.0047  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:35:13 d2.utils.events]: [0m eta: 0:15:08  iter: 3059  total_loss: 0.124  loss_cls: 0.067  loss_box_reg: 0.055  time: 0.4550  data_time: 0.0044  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:35:23 d2.utils.events]: [0m eta: 0:14:59  iter: 3079  total_loss: 0.137  loss_cls: 0.074  loss_box_reg: 0.064  time: 0.4551  data_time: 0.0048  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:35:32 d2.utils.events]: [0m eta: 0:14:49  iter: 3099  total_loss: 0.128  loss_cls: 0.065  loss_box_reg: 0.051  time: 0.4551  data_time: 0.0046  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:35:41 d2.utils.events]: [0m eta: 0:14:39  iter: 3119  total_loss: 0.116  loss_cls: 0.070  loss_box_reg: 0.051  time: 0.4550  data_time: 0.0045  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:35:50 d2.utils.events]: [0m eta: 0:14:30  iter: 3139  total_loss: 0.122  loss_cls: 0.068  loss_box_reg: 0.061  time: 0.4550  data_time: 0.0041  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:35:59 d2.utils.events]: [0m eta: 0:14:20  iter: 3159  total_loss: 0.115  loss_cls: 0.063  loss_box_reg: 0.051  time: 0.4550  data_time: 0.0046  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:36:08 d2.utils.events]: [0m eta: 0:14:11  iter: 3179  total_loss: 0.108  loss_cls: 0.055  loss_box_reg: 0.049  time: 0.4549  data_time: 0.0041  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:36:17 d2.utils.events]: [0m eta: 0:14:02  iter: 3199  total_loss: 0.133  loss_cls: 0.067  loss_box_reg: 0.062  time: 0.4550  data_time: 0.0040  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:36:26 d2.utils.events]: [0m eta: 0:13:52  iter: 3219  total_loss: 0.109  loss_cls: 0.058  loss_box_reg: 0.052  time: 0.4550  data_time: 0.0041  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:36:36 d2.utils.events]: [0m eta: 0:13:43  iter: 3239  total_loss: 0.118  loss_cls: 0.062  loss_box_reg: 0.058  time: 0.4551  data_time: 0.0045  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:36:45 d2.utils.events]: [0m eta: 0:13:34  iter: 3259  total_loss: 0.126  loss_cls: 0.070  loss_box_reg: 0.063  time: 0.4551  data_time: 0.0045  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:36:54 d2.utils.events]: [0m eta: 0:13:24  iter: 3279  total_loss: 0.127  loss_cls: 0.063  loss_box_reg: 0.059  time: 0.4551  data_time: 0.0043  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:37:03 d2.utils.events]: [0m eta: 0:13:14  iter: 3299  total_loss: 0.118  loss_cls: 0.064  loss_box_reg: 0.056  time: 0.4551  data_time: 0.0044  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:37:12 d2.utils.events]: [0m eta: 0:13:05  iter: 3319  total_loss: 0.121  loss_cls: 0.061  loss_box_reg: 0.057  time: 0.4552  data_time: 0.0044  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:37:22 d2.utils.events]: [0m eta: 0:12:56  iter: 3339  total_loss: 0.105  loss_cls: 0.060  loss_box_reg: 0.050  time: 0.4552  data_time: 0.0039  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:37:31 d2.utils.events]: [0m eta: 0:12:48  iter: 3359  total_loss: 0.153  loss_cls: 0.081  loss_box_reg: 0.073  time: 0.4553  data_time: 0.0040  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:37:40 d2.utils.events]: [0m eta: 0:12:39  iter: 3379  total_loss: 0.129  loss_cls: 0.072  loss_box_reg: 0.056  time: 0.4553  data_time: 0.0039  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:37:49 d2.utils.events]: [0m eta: 0:12:28  iter: 3399  total_loss: 0.104  loss_cls: 0.055  loss_box_reg: 0.049  time: 0.4552  data_time: 0.0038  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:37:58 d2.utils.events]: [0m eta: 0:12:21  iter: 3419  total_loss: 0.103  loss_cls: 0.057  loss_box_reg: 0.049  time: 0.4553  data_time: 0.0043  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:38:07 d2.utils.events]: [0m eta: 0:12:10  iter: 3439  total_loss: 0.121  loss_cls: 0.062  loss_box_reg: 0.053  time: 0.4553  data_time: 0.0043  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:38:16 d2.utils.events]: [0m eta: 0:12:00  iter: 3459  total_loss: 0.141  loss_cls: 0.072  loss_box_reg: 0.063  time: 0.4552  data_time: 0.0044  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:38:25 d2.utils.events]: [0m eta: 0:11:50  iter: 3479  total_loss: 0.093  loss_cls: 0.052  loss_box_reg: 0.048  time: 0.4551  data_time: 0.0038  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:38:34 d2.utils.events]: [0m eta: 0:11:41  iter: 3499  total_loss: 0.125  loss_cls: 0.071  loss_box_reg: 0.056  time: 0.4552  data_time: 0.0039  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:38:44 d2.utils.events]: [0m eta: 0:11:31  iter: 3519  total_loss: 0.121  loss_cls: 0.062  loss_box_reg: 0.064  time: 0.4553  data_time: 0.0037  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:38:53 d2.utils.events]: [0m eta: 0:11:22  iter: 3539  total_loss: 0.130  loss_cls: 0.068  loss_box_reg: 0.063  time: 0.4553  data_time: 0.0039  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:39:02 d2.utils.events]: [0m eta: 0:11:13  iter: 3559  total_loss: 0.127  loss_cls: 0.069  loss_box_reg: 0.054  time: 0.4554  data_time: 0.0036  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:39:12 d2.utils.events]: [0m eta: 0:11:04  iter: 3579  total_loss: 0.115  loss_cls: 0.061  loss_box_reg: 0.051  time: 0.4554  data_time: 0.0036  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:39:20 d2.utils.events]: [0m eta: 0:10:54  iter: 3599  total_loss: 0.112  loss_cls: 0.059  loss_box_reg: 0.057  time: 0.4553  data_time: 0.0038  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:39:30 d2.utils.events]: [0m eta: 0:10:45  iter: 3619  total_loss: 0.130  loss_cls: 0.069  loss_box_reg: 0.059  time: 0.4554  data_time: 0.0043  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:39:39 d2.utils.events]: [0m eta: 0:10:36  iter: 3639  total_loss: 0.124  loss_cls: 0.066  loss_box_reg: 0.058  time: 0.4555  data_time: 0.0040  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:39:48 d2.utils.events]: [0m eta: 0:10:26  iter: 3659  total_loss: 0.115  loss_cls: 0.063  loss_box_reg: 0.061  time: 0.4554  data_time: 0.0040  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:39:57 d2.utils.events]: [0m eta: 0:10:16  iter: 3679  total_loss: 0.115  loss_cls: 0.058  loss_box_reg: 0.051  time: 0.4554  data_time: 0.0042  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:40:06 d2.utils.events]: [0m eta: 0:10:07  iter: 3699  total_loss: 0.115  loss_cls: 0.057  loss_box_reg: 0.056  time: 0.4554  data_time: 0.0040  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:40:15 d2.utils.events]: [0m eta: 0:09:58  iter: 3719  total_loss: 0.121  loss_cls: 0.068  loss_box_reg: 0.058  time: 0.4554  data_time: 0.0039  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:40:25 d2.utils.events]: [0m eta: 0:09:48  iter: 3739  total_loss: 0.112  loss_cls: 0.052  loss_box_reg: 0.059  time: 0.4554  data_time: 0.0036  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:40:34 d2.utils.events]: [0m eta: 0:09:39  iter: 3759  total_loss: 0.099  loss_cls: 0.052  loss_box_reg: 0.046  time: 0.4554  data_time: 0.0038  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:40:43 d2.utils.events]: [0m eta: 0:09:29  iter: 3779  total_loss: 0.152  loss_cls: 0.084  loss_box_reg: 0.070  time: 0.4554  data_time: 0.0045  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:40:52 d2.utils.events]: [0m eta: 0:09:20  iter: 3799  total_loss: 0.128  loss_cls: 0.071  loss_box_reg: 0.056  time: 0.4554  data_time: 0.0042  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:41:01 d2.utils.events]: [0m eta: 0:09:10  iter: 3819  total_loss: 0.097  loss_cls: 0.051  loss_box_reg: 0.045  time: 0.4554  data_time: 0.0044  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:41:10 d2.utils.events]: [0m eta: 0:09:01  iter: 3839  total_loss: 0.127  loss_cls: 0.065  loss_box_reg: 0.053  time: 0.4554  data_time: 0.0045  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:41:19 d2.utils.events]: [0m eta: 0:08:51  iter: 3859  total_loss: 0.113  loss_cls: 0.058  loss_box_reg: 0.052  time: 0.4554  data_time: 0.0042  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:41:28 d2.utils.events]: [0m eta: 0:08:42  iter: 3879  total_loss: 0.096  loss_cls: 0.049  loss_box_reg: 0.053  time: 0.4554  data_time: 0.0044  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:41:37 d2.utils.events]: [0m eta: 0:08:33  iter: 3899  total_loss: 0.128  loss_cls: 0.068  loss_box_reg: 0.058  time: 0.4554  data_time: 0.0043  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:41:47 d2.utils.events]: [0m eta: 0:08:23  iter: 3919  total_loss: 0.117  loss_cls: 0.063  loss_box_reg: 0.052  time: 0.4554  data_time: 0.0041  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:41:56 d2.utils.events]: [0m eta: 0:08:14  iter: 3939  total_loss: 0.119  loss_cls: 0.065  loss_box_reg: 0.047  time: 0.4555  data_time: 0.0044  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:42:05 d2.utils.events]: [0m eta: 0:08:04  iter: 3959  total_loss: 0.138  loss_cls: 0.061  loss_box_reg: 0.066  time: 0.4554  data_time: 0.0039  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:42:14 d2.utils.events]: [0m eta: 0:07:54  iter: 3979  total_loss: 0.110  loss_cls: 0.060  loss_box_reg: 0.053  time: 0.4554  data_time: 0.0040  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:42:23 d2.utils.events]: [0m eta: 0:07:45  iter: 3999  total_loss: 0.116  loss_cls: 0.070  loss_box_reg: 0.049  time: 0.4555  data_time: 0.0045  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:42:32 d2.utils.events]: [0m eta: 0:07:36  iter: 4019  total_loss: 0.110  loss_cls: 0.055  loss_box_reg: 0.053  time: 0.4554  data_time: 0.0044  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:42:41 d2.utils.events]: [0m eta: 0:07:26  iter: 4039  total_loss: 0.126  loss_cls: 0.066  loss_box_reg: 0.067  time: 0.4554  data_time: 0.0043  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:42:50 d2.utils.events]: [0m eta: 0:07:16  iter: 4059  total_loss: 0.095  loss_cls: 0.050  loss_box_reg: 0.045  time: 0.4554  data_time: 0.0040  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:42:59 d2.utils.events]: [0m eta: 0:07:07  iter: 4079  total_loss: 0.111  loss_cls: 0.057  loss_box_reg: 0.050  time: 0.4554  data_time: 0.0037  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:43:09 d2.utils.events]: [0m eta: 0:06:58  iter: 4099  total_loss: 0.119  loss_cls: 0.065  loss_box_reg: 0.055  time: 0.4555  data_time: 0.0041  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:43:18 d2.utils.events]: [0m eta: 0:06:49  iter: 4119  total_loss: 0.134  loss_cls: 0.063  loss_box_reg: 0.065  time: 0.4555  data_time: 0.0039  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:43:27 d2.utils.events]: [0m eta: 0:06:40  iter: 4139  total_loss: 0.102  loss_cls: 0.051  loss_box_reg: 0.052  time: 0.4556  data_time: 0.0041  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:43:37 d2.utils.events]: [0m eta: 0:06:31  iter: 4159  total_loss: 0.097  loss_cls: 0.050  loss_box_reg: 0.043  time: 0.4557  data_time: 0.0041  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:43:46 d2.utils.events]: [0m eta: 0:06:22  iter: 4179  total_loss: 0.118  loss_cls: 0.061  loss_box_reg: 0.055  time: 0.4557  data_time: 0.0042  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:43:56 d2.utils.events]: [0m eta: 0:06:12  iter: 4199  total_loss: 0.100  loss_cls: 0.052  loss_box_reg: 0.051  time: 0.4557  data_time: 0.0040  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:44:04 d2.utils.events]: [0m eta: 0:06:03  iter: 4219  total_loss: 0.119  loss_cls: 0.064  loss_box_reg: 0.050  time: 0.4556  data_time: 0.0045  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:44:14 d2.utils.events]: [0m eta: 0:05:53  iter: 4239  total_loss: 0.100  loss_cls: 0.050  loss_box_reg: 0.041  time: 0.4557  data_time: 0.0044  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:44:23 d2.utils.events]: [0m eta: 0:05:44  iter: 4259  total_loss: 0.092  loss_cls: 0.049  loss_box_reg: 0.047  time: 0.4557  data_time: 0.0041  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:44:32 d2.utils.events]: [0m eta: 0:05:35  iter: 4279  total_loss: 0.113  loss_cls: 0.061  loss_box_reg: 0.052  time: 0.4558  data_time: 0.0037  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:44:41 d2.utils.events]: [0m eta: 0:05:26  iter: 4299  total_loss: 0.109  loss_cls: 0.056  loss_box_reg: 0.051  time: 0.4557  data_time: 0.0038  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:44:50 d2.utils.events]: [0m eta: 0:05:16  iter: 4319  total_loss: 0.116  loss_cls: 0.061  loss_box_reg: 0.055  time: 0.4557  data_time: 0.0041  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:45:00 d2.utils.events]: [0m eta: 0:05:07  iter: 4339  total_loss: 0.124  loss_cls: 0.059  loss_box_reg: 0.052  time: 0.4558  data_time: 0.0038  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:45:09 d2.utils.events]: [0m eta: 0:04:58  iter: 4359  total_loss: 0.112  loss_cls: 0.057  loss_box_reg: 0.049  time: 0.4558  data_time: 0.0037  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:45:18 d2.utils.events]: [0m eta: 0:04:48  iter: 4379  total_loss: 0.103  loss_cls: 0.050  loss_box_reg: 0.051  time: 0.4558  data_time: 0.0041  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:45:27 d2.utils.events]: [0m eta: 0:04:39  iter: 4399  total_loss: 0.091  loss_cls: 0.050  loss_box_reg: 0.044  time: 0.4558  data_time: 0.0040  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:45:37 d2.utils.events]: [0m eta: 0:04:30  iter: 4419  total_loss: 0.120  loss_cls: 0.057  loss_box_reg: 0.056  time: 0.4559  data_time: 0.0040  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:45:46 d2.utils.events]: [0m eta: 0:04:21  iter: 4439  total_loss: 0.115  loss_cls: 0.057  loss_box_reg: 0.048  time: 0.4560  data_time: 0.0044  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:45:55 d2.utils.events]: [0m eta: 0:04:11  iter: 4459  total_loss: 0.136  loss_cls: 0.066  loss_box_reg: 0.064  time: 0.4560  data_time: 0.0041  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:46:04 d2.utils.events]: [0m eta: 0:04:02  iter: 4479  total_loss: 0.085  loss_cls: 0.045  loss_box_reg: 0.041  time: 0.4559  data_time: 0.0042  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:46:13 d2.utils.events]: [0m eta: 0:03:53  iter: 4499  total_loss: 0.122  loss_cls: 0.063  loss_box_reg: 0.058  time: 0.4559  data_time: 0.0038  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:46:23 d2.utils.events]: [0m eta: 0:03:44  iter: 4519  total_loss: 0.114  loss_cls: 0.057  loss_box_reg: 0.054  time: 0.4560  data_time: 0.0041  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:46:32 d2.utils.events]: [0m eta: 0:03:35  iter: 4539  total_loss: 0.120  loss_cls: 0.065  loss_box_reg: 0.055  time: 0.4561  data_time: 0.0044  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:46:42 d2.utils.events]: [0m eta: 0:03:25  iter: 4559  total_loss: 0.099  loss_cls: 0.050  loss_box_reg: 0.049  time: 0.4561  data_time: 0.0037  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:46:50 d2.utils.events]: [0m eta: 0:03:16  iter: 4579  total_loss: 0.108  loss_cls: 0.067  loss_box_reg: 0.044  time: 0.4560  data_time: 0.0042  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:46:59 d2.utils.events]: [0m eta: 0:03:06  iter: 4599  total_loss: 0.099  loss_cls: 0.058  loss_box_reg: 0.045  time: 0.4560  data_time: 0.0040  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:47:08 d2.utils.events]: [0m eta: 0:02:57  iter: 4619  total_loss: 0.114  loss_cls: 0.061  loss_box_reg: 0.052  time: 0.4560  data_time: 0.0045  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:47:18 d2.utils.events]: [0m eta: 0:02:48  iter: 4639  total_loss: 0.098  loss_cls: 0.054  loss_box_reg: 0.048  time: 0.4560  data_time: 0.0040  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:47:27 d2.utils.events]: [0m eta: 0:02:38  iter: 4659  total_loss: 0.128  loss_cls: 0.070  loss_box_reg: 0.057  time: 0.4560  data_time: 0.0047  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:47:36 d2.utils.events]: [0m eta: 0:02:29  iter: 4679  total_loss: 0.107  loss_cls: 0.057  loss_box_reg: 0.046  time: 0.4561  data_time: 0.0039  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:47:46 d2.utils.events]: [0m eta: 0:02:20  iter: 4699  total_loss: 0.105  loss_cls: 0.060  loss_box_reg: 0.050  time: 0.4562  data_time: 0.0045  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:47:55 d2.utils.events]: [0m eta: 0:02:10  iter: 4719  total_loss: 0.116  loss_cls: 0.059  loss_box_reg: 0.056  time: 0.4562  data_time: 0.0037  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:48:04 d2.utils.events]: [0m eta: 0:02:01  iter: 4739  total_loss: 0.105  loss_cls: 0.054  loss_box_reg: 0.052  time: 0.4562  data_time: 0.0038  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:48:13 d2.utils.events]: [0m eta: 0:01:52  iter: 4759  total_loss: 0.119  loss_cls: 0.067  loss_box_reg: 0.057  time: 0.4562  data_time: 0.0039  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:48:22 d2.utils.events]: [0m eta: 0:01:42  iter: 4779  total_loss: 0.111  loss_cls: 0.059  loss_box_reg: 0.055  time: 0.4562  data_time: 0.0038  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:48:31 d2.utils.events]: [0m eta: 0:01:33  iter: 4799  total_loss: 0.141  loss_cls: 0.068  loss_box_reg: 0.069  time: 0.4561  data_time: 0.0038  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:48:40 d2.utils.events]: [0m eta: 0:01:24  iter: 4819  total_loss: 0.112  loss_cls: 0.063  loss_box_reg: 0.052  time: 0.4561  data_time: 0.0038  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:48:50 d2.utils.events]: [0m eta: 0:01:15  iter: 4839  total_loss: 0.102  loss_cls: 0.058  loss_box_reg: 0.046  time: 0.4563  data_time: 0.0041  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:48:59 d2.utils.events]: [0m eta: 0:01:05  iter: 4859  total_loss: 0.102  loss_cls: 0.058  loss_box_reg: 0.045  time: 0.4562  data_time: 0.0046  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:49:08 d2.utils.events]: [0m eta: 0:00:56  iter: 4879  total_loss: 0.123  loss_cls: 0.071  loss_box_reg: 0.051  time: 0.4562  data_time: 0.0040  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:49:17 d2.utils.events]: [0m eta: 0:00:47  iter: 4899  total_loss: 0.099  loss_cls: 0.049  loss_box_reg: 0.048  time: 0.4562  data_time: 0.0038  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:49:27 d2.utils.events]: [0m eta: 0:00:37  iter: 4919  total_loss: 0.107  loss_cls: 0.054  loss_box_reg: 0.047  time: 0.4563  data_time: 0.0043  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:49:36 d2.utils.events]: [0m eta: 0:00:28  iter: 4939  total_loss: 0.114  loss_cls: 0.064  loss_box_reg: 0.054  time: 0.4563  data_time: 0.0043  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:49:45 d2.utils.events]: [0m eta: 0:00:19  iter: 4959  total_loss: 0.131  loss_cls: 0.074  loss_box_reg: 0.056  time: 0.4563  data_time: 0.0045  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:49:54 d2.utils.events]: [0m eta: 0:00:09  iter: 4979  total_loss: 0.111  loss_cls: 0.061  loss_box_reg: 0.054  time: 0.4563  data_time: 0.0045  lr: 0.000250  max_mem: 4839M
Loading sequence 0002
Loading sequence 0005
Loading sequence 0009
Loading sequence 0011
0002
0005
0009
0011
Loaded 850 images!
[32m[03/14 21:51:21 d2.data.build]: [0mDistribution of instances among all 3 categories:
[36m|  category  | #instances   |  category  | #instances   |  category  | #instances   |
|:----------:|:-------------|:----------:|:-------------|:----------:|:-------------|
|    None    | 0            |    Car     | 0            | Pedestrian | 8006         |
|            |              |            |              |            |              |
|   total    | 8006         |            |              |            |              |[0m
[32m[03/14 21:51:21 d2.data.common]: [0mSerializing 850 elements to byte tensors and concatenating them all ...
[32m[03/14 21:51:21 d2.data.common]: [0mSerialized dataset takes 0.97 MiB
[5m[31mWARNING[0m [32m[03/14 21:51:21 d2.engine.defaults]: [0mNo evaluator found. Use `DefaultTrainer.test(evaluators=)`, or implement its `build_evaluator` method.
[32m[03/14 21:51:21 d2.utils.events]: [0m eta: 0:00:00  iter: 4999  total_loss: 0.130  loss_cls: 0.062  loss_box_reg: 0.062  time: 0.4563  data_time: 0.0043  lr: 0.000250  max_mem: 4839M
[32m[03/14 21:51:21 d2.engine.hooks]: [0mOverall training speed: 4997 iterations in 0:38:00 (0.4564 s / it)
[32m[03/14 21:51:21 d2.engine.hooks]: [0mTotal training time: 0:39:23 (0:01:22 on hooks)
Loading sequence 0002
Loading sequence 0005
Loading sequence 0009
Loading sequence 0011
0002
0005
0009
0011
Loaded 850 images!
