Metadata(name='MOTSChallenge_train', thing_classes=['None', 'Car', 'Pedestrian'])
Loading sequence 0002
Loading sequence 0009
Loading sequence 0011
0002
0009
0011
Loaded 2025 images!
[32m[03/15 14:55:54 d2.engine.defaults]: [0mModel:
RetinaNet(
  (backbone): FPN(
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelP6P7(
      (p6): Conv2d(2048, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (p7): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    )
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (head): RetinaNetHead(
    (cls_subnet): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
      (4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): ReLU()
      (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (7): ReLU()
    )
    (bbox_subnet): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
      (4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): ReLU()
      (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (7): ReLU()
    )
    (cls_score): Conv2d(256, 720, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (bbox_pred): Conv2d(256, 36, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (anchor_generator): DefaultAnchorGenerator(
    (cell_anchors): BufferList()
  )
)
Loading sequence 0002
Loading sequence 0009
Loading sequence 0011
0002
0009
0011
Loaded 2025 images!
[32m[03/15 14:58:51 d2.data.build]: [0mRemoved 0 images with no usable annotations. 2025 images left.
[32m[03/15 14:58:51 d2.data.build]: [0mDistribution of instances among all 3 categories:
[36m|  category  | #instances   |  category  | #instances   |  category  | #instances   |
|:----------:|:-------------|:----------:|:-------------|:----------:|:-------------|
|    None    | 0            |    Car     | 0            | Pedestrian | 20324        |
|            |              |            |              |            |              |
|   total    | 20324        |            |              |            |              |[0m
[32m[03/15 14:58:51 d2.data.common]: [0mSerializing 2025 elements to byte tensors and concatenating them all ...
[32m[03/15 14:58:51 d2.data.common]: [0mSerialized dataset takes 2.43 MiB
[32m[03/15 14:58:51 d2.data.detection_utils]: [0mTransformGens used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[32m[03/15 14:58:51 d2.data.build]: [0mUsing training sampler TrainingSampler
[32m[03/15 14:58:52 d2.engine.train_loop]: [0mStarting training from iteration 0
[32m[03/15 14:59:03 d2.utils.events]: [0m eta: 0:37:13  iter: 19  total_loss: 2.440  loss_cls: 2.362  loss_box_reg: 0.133  time: 0.4343  data_time: 0.0304  lr: 0.000005  max_mem: 4671M
[32m[03/15 14:59:12 d2.utils.events]: [0m eta: 0:37:14  iter: 39  total_loss: 1.680  loss_cls: 1.542  loss_box_reg: 0.125  time: 0.4388  data_time: 0.0038  lr: 0.000010  max_mem: 4671M
[32m[03/15 14:59:20 d2.utils.events]: [0m eta: 0:37:11  iter: 59  total_loss: 1.081  loss_cls: 1.009  loss_box_reg: 0.096  time: 0.4408  data_time: 0.0036  lr: 0.000015  max_mem: 4671M
[32m[03/15 14:59:29 d2.utils.events]: [0m eta: 0:37:10  iter: 79  total_loss: 0.720  loss_cls: 0.615  loss_box_reg: 0.118  time: 0.4431  data_time: 0.0037  lr: 0.000020  max_mem: 4671M
[32m[03/15 14:59:38 d2.utils.events]: [0m eta: 0:37:01  iter: 99  total_loss: 0.451  loss_cls: 0.339  loss_box_reg: 0.091  time: 0.4423  data_time: 0.0037  lr: 0.000025  max_mem: 4671M
[32m[03/15 14:59:47 d2.utils.events]: [0m eta: 0:36:58  iter: 119  total_loss: 0.413  loss_cls: 0.290  loss_box_reg: 0.106  time: 0.4448  data_time: 0.0036  lr: 0.000030  max_mem: 4671M
[32m[03/15 14:59:57 d2.utils.events]: [0m eta: 0:36:58  iter: 139  total_loss: 0.332  loss_cls: 0.225  loss_box_reg: 0.096  time: 0.4485  data_time: 0.0040  lr: 0.000035  max_mem: 4671M
[32m[03/15 15:00:06 d2.utils.events]: [0m eta: 0:36:51  iter: 159  total_loss: 0.281  loss_cls: 0.194  loss_box_reg: 0.099  time: 0.4500  data_time: 0.0041  lr: 0.000040  max_mem: 4671M
[32m[03/15 15:00:16 d2.utils.events]: [0m eta: 0:36:50  iter: 179  total_loss: 0.316  loss_cls: 0.220  loss_box_reg: 0.098  time: 0.4530  data_time: 0.0038  lr: 0.000045  max_mem: 4671M
[32m[03/15 15:00:25 d2.utils.events]: [0m eta: 0:36:42  iter: 199  total_loss: 0.300  loss_cls: 0.190  loss_box_reg: 0.109  time: 0.4543  data_time: 0.0036  lr: 0.000050  max_mem: 4671M
[32m[03/15 15:00:34 d2.utils.events]: [0m eta: 0:36:36  iter: 219  total_loss: 0.252  loss_cls: 0.168  loss_box_reg: 0.087  time: 0.4548  data_time: 0.0038  lr: 0.000055  max_mem: 4671M
[32m[03/15 15:00:44 d2.utils.events]: [0m eta: 0:36:31  iter: 239  total_loss: 0.244  loss_cls: 0.158  loss_box_reg: 0.080  time: 0.4565  data_time: 0.0043  lr: 0.000060  max_mem: 4671M
[32m[03/15 15:00:53 d2.utils.events]: [0m eta: 0:36:25  iter: 259  total_loss: 0.230  loss_cls: 0.149  loss_box_reg: 0.094  time: 0.4580  data_time: 0.0037  lr: 0.000065  max_mem: 4671M
[32m[03/15 15:01:02 d2.utils.events]: [0m eta: 0:36:19  iter: 279  total_loss: 0.276  loss_cls: 0.170  loss_box_reg: 0.096  time: 0.4585  data_time: 0.0038  lr: 0.000070  max_mem: 4671M
[32m[03/15 15:01:12 d2.utils.events]: [0m eta: 0:36:11  iter: 299  total_loss: 0.215  loss_cls: 0.133  loss_box_reg: 0.079  time: 0.4590  data_time: 0.0036  lr: 0.000075  max_mem: 4671M
[32m[03/15 15:01:21 d2.utils.events]: [0m eta: 0:36:05  iter: 319  total_loss: 0.235  loss_cls: 0.138  loss_box_reg: 0.082  time: 0.4595  data_time: 0.0036  lr: 0.000080  max_mem: 4671M
[32m[03/15 15:01:31 d2.utils.events]: [0m eta: 0:35:59  iter: 339  total_loss: 0.232  loss_cls: 0.131  loss_box_reg: 0.084  time: 0.4603  data_time: 0.0038  lr: 0.000085  max_mem: 4671M
[32m[03/15 15:01:40 d2.utils.events]: [0m eta: 0:35:50  iter: 359  total_loss: 0.240  loss_cls: 0.144  loss_box_reg: 0.091  time: 0.4600  data_time: 0.0037  lr: 0.000090  max_mem: 4671M
[32m[03/15 15:01:49 d2.utils.events]: [0m eta: 0:35:41  iter: 379  total_loss: 0.198  loss_cls: 0.120  loss_box_reg: 0.078  time: 0.4601  data_time: 0.0038  lr: 0.000095  max_mem: 4671M
[32m[03/15 15:01:58 d2.utils.events]: [0m eta: 0:35:36  iter: 399  total_loss: 0.186  loss_cls: 0.121  loss_box_reg: 0.065  time: 0.4607  data_time: 0.0034  lr: 0.000100  max_mem: 4671M
[32m[03/15 15:02:08 d2.utils.events]: [0m eta: 0:35:28  iter: 419  total_loss: 0.182  loss_cls: 0.111  loss_box_reg: 0.073  time: 0.4607  data_time: 0.0036  lr: 0.000105  max_mem: 4671M
[32m[03/15 15:02:17 d2.utils.events]: [0m eta: 0:35:18  iter: 439  total_loss: 0.221  loss_cls: 0.131  loss_box_reg: 0.088  time: 0.4605  data_time: 0.0037  lr: 0.000110  max_mem: 4671M
[32m[03/15 15:02:26 d2.utils.events]: [0m eta: 0:35:10  iter: 459  total_loss: 0.183  loss_cls: 0.106  loss_box_reg: 0.068  time: 0.4607  data_time: 0.0036  lr: 0.000115  max_mem: 4671M
[32m[03/15 15:02:35 d2.utils.events]: [0m eta: 0:35:00  iter: 479  total_loss: 0.187  loss_cls: 0.096  loss_box_reg: 0.086  time: 0.4606  data_time: 0.0041  lr: 0.000120  max_mem: 4671M
[32m[03/15 15:02:45 d2.utils.events]: [0m eta: 0:34:51  iter: 499  total_loss: 0.190  loss_cls: 0.112  loss_box_reg: 0.083  time: 0.4607  data_time: 0.0038  lr: 0.000125  max_mem: 4671M
[32m[03/15 15:02:54 d2.utils.events]: [0m eta: 0:34:45  iter: 519  total_loss: 0.200  loss_cls: 0.107  loss_box_reg: 0.083  time: 0.4613  data_time: 0.0037  lr: 0.000130  max_mem: 4671M
[32m[03/15 15:03:03 d2.utils.events]: [0m eta: 0:34:37  iter: 539  total_loss: 0.211  loss_cls: 0.116  loss_box_reg: 0.094  time: 0.4614  data_time: 0.0037  lr: 0.000135  max_mem: 4671M
[32m[03/15 15:03:13 d2.utils.events]: [0m eta: 0:34:27  iter: 559  total_loss: 0.193  loss_cls: 0.099  loss_box_reg: 0.084  time: 0.4613  data_time: 0.0037  lr: 0.000140  max_mem: 4671M
[32m[03/15 15:03:22 d2.utils.events]: [0m eta: 0:34:18  iter: 579  total_loss: 0.148  loss_cls: 0.083  loss_box_reg: 0.065  time: 0.4614  data_time: 0.0039  lr: 0.000145  max_mem: 4671M
[32m[03/15 15:03:31 d2.utils.events]: [0m eta: 0:34:12  iter: 599  total_loss: 0.200  loss_cls: 0.110  loss_box_reg: 0.090  time: 0.4619  data_time: 0.0038  lr: 0.000150  max_mem: 4671M
[32m[03/15 15:03:41 d2.utils.events]: [0m eta: 0:34:04  iter: 619  total_loss: 0.170  loss_cls: 0.105  loss_box_reg: 0.076  time: 0.4622  data_time: 0.0041  lr: 0.000155  max_mem: 4671M
[32m[03/15 15:03:50 d2.utils.events]: [0m eta: 0:33:56  iter: 639  total_loss: 0.155  loss_cls: 0.085  loss_box_reg: 0.071  time: 0.4623  data_time: 0.0039  lr: 0.000160  max_mem: 4671M
[32m[03/15 15:04:00 d2.utils.events]: [0m eta: 0:33:47  iter: 659  total_loss: 0.175  loss_cls: 0.099  loss_box_reg: 0.070  time: 0.4626  data_time: 0.0038  lr: 0.000165  max_mem: 4671M
[32m[03/15 15:04:09 d2.utils.events]: [0m eta: 0:33:38  iter: 679  total_loss: 0.186  loss_cls: 0.109  loss_box_reg: 0.077  time: 0.4625  data_time: 0.0037  lr: 0.000170  max_mem: 4671M
[32m[03/15 15:04:18 d2.utils.events]: [0m eta: 0:33:29  iter: 699  total_loss: 0.174  loss_cls: 0.104  loss_box_reg: 0.077  time: 0.4626  data_time: 0.0039  lr: 0.000175  max_mem: 4671M
[32m[03/15 15:04:28 d2.utils.events]: [0m eta: 0:33:20  iter: 719  total_loss: 0.177  loss_cls: 0.104  loss_box_reg: 0.082  time: 0.4628  data_time: 0.0034  lr: 0.000180  max_mem: 4671M
[32m[03/15 15:04:37 d2.utils.events]: [0m eta: 0:33:13  iter: 739  total_loss: 0.161  loss_cls: 0.090  loss_box_reg: 0.064  time: 0.4629  data_time: 0.0039  lr: 0.000185  max_mem: 4671M
[32m[03/15 15:04:46 d2.utils.events]: [0m eta: 0:33:02  iter: 759  total_loss: 0.171  loss_cls: 0.101  loss_box_reg: 0.069  time: 0.4623  data_time: 0.0037  lr: 0.000190  max_mem: 4671M
[32m[03/15 15:04:55 d2.utils.events]: [0m eta: 0:32:52  iter: 779  total_loss: 0.207  loss_cls: 0.107  loss_box_reg: 0.091  time: 0.4621  data_time: 0.0037  lr: 0.000195  max_mem: 4671M
[32m[03/15 15:05:04 d2.utils.events]: [0m eta: 0:32:44  iter: 799  total_loss: 0.171  loss_cls: 0.095  loss_box_reg: 0.069  time: 0.4624  data_time: 0.0037  lr: 0.000200  max_mem: 4671M
[32m[03/15 15:05:14 d2.utils.events]: [0m eta: 0:32:39  iter: 819  total_loss: 0.180  loss_cls: 0.094  loss_box_reg: 0.080  time: 0.4629  data_time: 0.0038  lr: 0.000205  max_mem: 4671M
[32m[03/15 15:05:24 d2.utils.events]: [0m eta: 0:32:30  iter: 839  total_loss: 0.176  loss_cls: 0.096  loss_box_reg: 0.085  time: 0.4633  data_time: 0.0039  lr: 0.000210  max_mem: 4671M
[32m[03/15 15:05:33 d2.utils.events]: [0m eta: 0:32:20  iter: 859  total_loss: 0.132  loss_cls: 0.074  loss_box_reg: 0.065  time: 0.4631  data_time: 0.0038  lr: 0.000215  max_mem: 4671M
[32m[03/15 15:05:42 d2.utils.events]: [0m eta: 0:32:12  iter: 879  total_loss: 0.135  loss_cls: 0.083  loss_box_reg: 0.061  time: 0.4635  data_time: 0.0037  lr: 0.000220  max_mem: 4671M
[32m[03/15 15:05:52 d2.utils.events]: [0m eta: 0:32:05  iter: 899  total_loss: 0.137  loss_cls: 0.076  loss_box_reg: 0.062  time: 0.4639  data_time: 0.0039  lr: 0.000225  max_mem: 4671M
[32m[03/15 15:06:01 d2.utils.events]: [0m eta: 0:31:56  iter: 919  total_loss: 0.141  loss_cls: 0.079  loss_box_reg: 0.066  time: 0.4640  data_time: 0.0038  lr: 0.000230  max_mem: 4671M
[32m[03/15 15:06:11 d2.utils.events]: [0m eta: 0:31:46  iter: 939  total_loss: 0.162  loss_cls: 0.088  loss_box_reg: 0.068  time: 0.4640  data_time: 0.0038  lr: 0.000235  max_mem: 4671M
[32m[03/15 15:06:20 d2.utils.events]: [0m eta: 0:31:37  iter: 959  total_loss: 0.166  loss_cls: 0.094  loss_box_reg: 0.070  time: 0.4641  data_time: 0.0036  lr: 0.000240  max_mem: 4671M
[32m[03/15 15:06:30 d2.utils.events]: [0m eta: 0:31:29  iter: 979  total_loss: 0.172  loss_cls: 0.102  loss_box_reg: 0.073  time: 0.4645  data_time: 0.0039  lr: 0.000245  max_mem: 4671M
[32m[03/15 15:06:39 d2.utils.events]: [0m eta: 0:31:20  iter: 999  total_loss: 0.137  loss_cls: 0.080  loss_box_reg: 0.054  time: 0.4645  data_time: 0.0043  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:06:48 d2.utils.events]: [0m eta: 0:31:12  iter: 1019  total_loss: 0.127  loss_cls: 0.074  loss_box_reg: 0.065  time: 0.4645  data_time: 0.0040  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:06:58 d2.utils.events]: [0m eta: 0:31:04  iter: 1039  total_loss: 0.155  loss_cls: 0.088  loss_box_reg: 0.070  time: 0.4646  data_time: 0.0039  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:07:07 d2.utils.events]: [0m eta: 0:30:56  iter: 1059  total_loss: 0.138  loss_cls: 0.077  loss_box_reg: 0.061  time: 0.4644  data_time: 0.0037  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:07:16 d2.utils.events]: [0m eta: 0:30:48  iter: 1079  total_loss: 0.151  loss_cls: 0.090  loss_box_reg: 0.063  time: 0.4643  data_time: 0.0038  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:07:25 d2.utils.events]: [0m eta: 0:30:41  iter: 1099  total_loss: 0.139  loss_cls: 0.077  loss_box_reg: 0.060  time: 0.4645  data_time: 0.0041  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:07:35 d2.utils.events]: [0m eta: 0:30:34  iter: 1119  total_loss: 0.136  loss_cls: 0.070  loss_box_reg: 0.066  time: 0.4646  data_time: 0.0036  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:07:44 d2.utils.events]: [0m eta: 0:30:25  iter: 1139  total_loss: 0.149  loss_cls: 0.080  loss_box_reg: 0.068  time: 0.4645  data_time: 0.0034  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:07:53 d2.utils.events]: [0m eta: 0:30:16  iter: 1159  total_loss: 0.147  loss_cls: 0.074  loss_box_reg: 0.061  time: 0.4645  data_time: 0.0039  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:08:03 d2.utils.events]: [0m eta: 0:30:07  iter: 1179  total_loss: 0.136  loss_cls: 0.074  loss_box_reg: 0.061  time: 0.4647  data_time: 0.0038  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:08:12 d2.utils.events]: [0m eta: 0:29:56  iter: 1199  total_loss: 0.150  loss_cls: 0.083  loss_box_reg: 0.066  time: 0.4647  data_time: 0.0037  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:08:21 d2.utils.events]: [0m eta: 0:29:48  iter: 1219  total_loss: 0.159  loss_cls: 0.081  loss_box_reg: 0.075  time: 0.4645  data_time: 0.0035  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:08:31 d2.utils.events]: [0m eta: 0:29:38  iter: 1239  total_loss: 0.143  loss_cls: 0.082  loss_box_reg: 0.060  time: 0.4646  data_time: 0.0039  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:08:40 d2.utils.events]: [0m eta: 0:29:28  iter: 1259  total_loss: 0.119  loss_cls: 0.069  loss_box_reg: 0.050  time: 0.4648  data_time: 0.0038  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:08:50 d2.utils.events]: [0m eta: 0:29:19  iter: 1279  total_loss: 0.130  loss_cls: 0.073  loss_box_reg: 0.061  time: 0.4650  data_time: 0.0038  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:08:59 d2.utils.events]: [0m eta: 0:29:11  iter: 1299  total_loss: 0.137  loss_cls: 0.079  loss_box_reg: 0.057  time: 0.4650  data_time: 0.0037  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:09:08 d2.utils.events]: [0m eta: 0:29:01  iter: 1319  total_loss: 0.147  loss_cls: 0.084  loss_box_reg: 0.060  time: 0.4650  data_time: 0.0035  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:09:18 d2.utils.events]: [0m eta: 0:28:52  iter: 1339  total_loss: 0.163  loss_cls: 0.085  loss_box_reg: 0.073  time: 0.4652  data_time: 0.0041  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:09:27 d2.utils.events]: [0m eta: 0:28:43  iter: 1359  total_loss: 0.137  loss_cls: 0.075  loss_box_reg: 0.066  time: 0.4652  data_time: 0.0037  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:09:36 d2.utils.events]: [0m eta: 0:28:34  iter: 1379  total_loss: 0.133  loss_cls: 0.068  loss_box_reg: 0.064  time: 0.4650  data_time: 0.0039  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:09:46 d2.utils.events]: [0m eta: 0:28:24  iter: 1399  total_loss: 0.144  loss_cls: 0.081  loss_box_reg: 0.072  time: 0.4650  data_time: 0.0038  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:09:55 d2.utils.events]: [0m eta: 0:28:15  iter: 1419  total_loss: 0.153  loss_cls: 0.081  loss_box_reg: 0.067  time: 0.4649  data_time: 0.0038  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:10:04 d2.utils.events]: [0m eta: 0:28:06  iter: 1439  total_loss: 0.120  loss_cls: 0.068  loss_box_reg: 0.048  time: 0.4650  data_time: 0.0036  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:10:14 d2.utils.events]: [0m eta: 0:27:57  iter: 1459  total_loss: 0.121  loss_cls: 0.063  loss_box_reg: 0.053  time: 0.4650  data_time: 0.0037  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:10:23 d2.utils.events]: [0m eta: 0:27:48  iter: 1479  total_loss: 0.144  loss_cls: 0.071  loss_box_reg: 0.063  time: 0.4650  data_time: 0.0036  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:10:32 d2.utils.events]: [0m eta: 0:27:38  iter: 1499  total_loss: 0.131  loss_cls: 0.065  loss_box_reg: 0.060  time: 0.4649  data_time: 0.0037  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:10:41 d2.utils.events]: [0m eta: 0:27:29  iter: 1519  total_loss: 0.151  loss_cls: 0.086  loss_box_reg: 0.062  time: 0.4649  data_time: 0.0037  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:10:51 d2.utils.events]: [0m eta: 0:27:20  iter: 1539  total_loss: 0.144  loss_cls: 0.085  loss_box_reg: 0.064  time: 0.4651  data_time: 0.0039  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:11:01 d2.utils.events]: [0m eta: 0:27:12  iter: 1559  total_loss: 0.136  loss_cls: 0.075  loss_box_reg: 0.061  time: 0.4653  data_time: 0.0039  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:11:10 d2.utils.events]: [0m eta: 0:27:03  iter: 1579  total_loss: 0.135  loss_cls: 0.073  loss_box_reg: 0.063  time: 0.4654  data_time: 0.0036  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:11:19 d2.utils.events]: [0m eta: 0:26:52  iter: 1599  total_loss: 0.154  loss_cls: 0.080  loss_box_reg: 0.069  time: 0.4653  data_time: 0.0037  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:11:28 d2.utils.events]: [0m eta: 0:26:42  iter: 1619  total_loss: 0.110  loss_cls: 0.061  loss_box_reg: 0.051  time: 0.4651  data_time: 0.0035  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:11:38 d2.utils.events]: [0m eta: 0:26:32  iter: 1639  total_loss: 0.113  loss_cls: 0.057  loss_box_reg: 0.053  time: 0.4651  data_time: 0.0038  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:11:47 d2.utils.events]: [0m eta: 0:26:23  iter: 1659  total_loss: 0.157  loss_cls: 0.085  loss_box_reg: 0.071  time: 0.4651  data_time: 0.0037  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:11:56 d2.utils.events]: [0m eta: 0:26:14  iter: 1679  total_loss: 0.128  loss_cls: 0.066  loss_box_reg: 0.061  time: 0.4652  data_time: 0.0037  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:12:05 d2.utils.events]: [0m eta: 0:26:04  iter: 1699  total_loss: 0.129  loss_cls: 0.073  loss_box_reg: 0.058  time: 0.4651  data_time: 0.0038  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:12:15 d2.utils.events]: [0m eta: 0:25:55  iter: 1719  total_loss: 0.142  loss_cls: 0.078  loss_box_reg: 0.067  time: 0.4652  data_time: 0.0035  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:12:24 d2.utils.events]: [0m eta: 0:25:45  iter: 1739  total_loss: 0.134  loss_cls: 0.073  loss_box_reg: 0.058  time: 0.4652  data_time: 0.0038  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:12:33 d2.utils.events]: [0m eta: 0:25:35  iter: 1759  total_loss: 0.132  loss_cls: 0.071  loss_box_reg: 0.057  time: 0.4650  data_time: 0.0039  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:12:43 d2.utils.events]: [0m eta: 0:25:27  iter: 1779  total_loss: 0.134  loss_cls: 0.077  loss_box_reg: 0.067  time: 0.4651  data_time: 0.0038  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:12:52 d2.utils.events]: [0m eta: 0:25:17  iter: 1799  total_loss: 0.096  loss_cls: 0.051  loss_box_reg: 0.047  time: 0.4651  data_time: 0.0037  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:13:01 d2.utils.events]: [0m eta: 0:25:07  iter: 1819  total_loss: 0.117  loss_cls: 0.066  loss_box_reg: 0.058  time: 0.4652  data_time: 0.0042  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:13:11 d2.utils.events]: [0m eta: 0:24:57  iter: 1839  total_loss: 0.167  loss_cls: 0.081  loss_box_reg: 0.080  time: 0.4650  data_time: 0.0037  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:13:20 d2.utils.events]: [0m eta: 0:24:47  iter: 1859  total_loss: 0.108  loss_cls: 0.063  loss_box_reg: 0.051  time: 0.4650  data_time: 0.0040  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:13:29 d2.utils.events]: [0m eta: 0:24:37  iter: 1879  total_loss: 0.127  loss_cls: 0.065  loss_box_reg: 0.062  time: 0.4649  data_time: 0.0036  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:13:39 d2.utils.events]: [0m eta: 0:24:27  iter: 1899  total_loss: 0.112  loss_cls: 0.061  loss_box_reg: 0.052  time: 0.4650  data_time: 0.0036  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:13:48 d2.utils.events]: [0m eta: 0:24:18  iter: 1919  total_loss: 0.132  loss_cls: 0.066  loss_box_reg: 0.062  time: 0.4652  data_time: 0.0037  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:13:57 d2.utils.events]: [0m eta: 0:24:09  iter: 1939  total_loss: 0.126  loss_cls: 0.064  loss_box_reg: 0.062  time: 0.4651  data_time: 0.0039  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:14:06 d2.utils.events]: [0m eta: 0:23:58  iter: 1959  total_loss: 0.136  loss_cls: 0.074  loss_box_reg: 0.066  time: 0.4650  data_time: 0.0036  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:14:16 d2.utils.events]: [0m eta: 0:23:48  iter: 1979  total_loss: 0.112  loss_cls: 0.061  loss_box_reg: 0.052  time: 0.4650  data_time: 0.0037  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:14:25 d2.utils.events]: [0m eta: 0:23:40  iter: 1999  total_loss: 0.135  loss_cls: 0.070  loss_box_reg: 0.063  time: 0.4649  data_time: 0.0043  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:14:34 d2.utils.events]: [0m eta: 0:23:30  iter: 2019  total_loss: 0.119  loss_cls: 0.062  loss_box_reg: 0.058  time: 0.4649  data_time: 0.0037  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:14:44 d2.utils.events]: [0m eta: 0:23:21  iter: 2039  total_loss: 0.112  loss_cls: 0.059  loss_box_reg: 0.056  time: 0.4650  data_time: 0.0037  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:14:53 d2.utils.events]: [0m eta: 0:23:12  iter: 2059  total_loss: 0.132  loss_cls: 0.068  loss_box_reg: 0.058  time: 0.4650  data_time: 0.0036  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:15:02 d2.utils.events]: [0m eta: 0:23:02  iter: 2079  total_loss: 0.104  loss_cls: 0.050  loss_box_reg: 0.049  time: 0.4649  data_time: 0.0037  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:15:11 d2.utils.events]: [0m eta: 0:22:53  iter: 2099  total_loss: 0.091  loss_cls: 0.051  loss_box_reg: 0.047  time: 0.4650  data_time: 0.0039  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:15:21 d2.utils.events]: [0m eta: 0:22:43  iter: 2119  total_loss: 0.104  loss_cls: 0.049  loss_box_reg: 0.054  time: 0.4649  data_time: 0.0037  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:15:30 d2.utils.events]: [0m eta: 0:22:34  iter: 2139  total_loss: 0.116  loss_cls: 0.066  loss_box_reg: 0.050  time: 0.4648  data_time: 0.0037  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:15:39 d2.utils.events]: [0m eta: 0:22:25  iter: 2159  total_loss: 0.096  loss_cls: 0.049  loss_box_reg: 0.047  time: 0.4650  data_time: 0.0036  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:15:49 d2.utils.events]: [0m eta: 0:22:15  iter: 2179  total_loss: 0.120  loss_cls: 0.061  loss_box_reg: 0.058  time: 0.4650  data_time: 0.0038  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:15:58 d2.utils.events]: [0m eta: 0:22:06  iter: 2199  total_loss: 0.132  loss_cls: 0.071  loss_box_reg: 0.067  time: 0.4650  data_time: 0.0039  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:16:08 d2.utils.events]: [0m eta: 0:21:57  iter: 2219  total_loss: 0.108  loss_cls: 0.062  loss_box_reg: 0.050  time: 0.4651  data_time: 0.0036  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:16:17 d2.utils.events]: [0m eta: 0:21:48  iter: 2239  total_loss: 0.127  loss_cls: 0.070  loss_box_reg: 0.059  time: 0.4652  data_time: 0.0037  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:16:26 d2.utils.events]: [0m eta: 0:21:37  iter: 2259  total_loss: 0.124  loss_cls: 0.065  loss_box_reg: 0.059  time: 0.4651  data_time: 0.0037  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:16:35 d2.utils.events]: [0m eta: 0:21:27  iter: 2279  total_loss: 0.110  loss_cls: 0.059  loss_box_reg: 0.051  time: 0.4650  data_time: 0.0036  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:16:44 d2.utils.events]: [0m eta: 0:21:17  iter: 2299  total_loss: 0.124  loss_cls: 0.056  loss_box_reg: 0.059  time: 0.4649  data_time: 0.0036  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:16:54 d2.utils.events]: [0m eta: 0:21:07  iter: 2319  total_loss: 0.112  loss_cls: 0.063  loss_box_reg: 0.040  time: 0.4649  data_time: 0.0036  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:17:03 d2.utils.events]: [0m eta: 0:20:57  iter: 2339  total_loss: 0.129  loss_cls: 0.068  loss_box_reg: 0.062  time: 0.4649  data_time: 0.0037  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:17:12 d2.utils.events]: [0m eta: 0:20:48  iter: 2359  total_loss: 0.116  loss_cls: 0.067  loss_box_reg: 0.054  time: 0.4650  data_time: 0.0036  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:17:22 d2.utils.events]: [0m eta: 0:20:39  iter: 2379  total_loss: 0.128  loss_cls: 0.067  loss_box_reg: 0.058  time: 0.4650  data_time: 0.0041  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:17:31 d2.utils.events]: [0m eta: 0:20:30  iter: 2399  total_loss: 0.132  loss_cls: 0.067  loss_box_reg: 0.063  time: 0.4651  data_time: 0.0039  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:17:41 d2.utils.events]: [0m eta: 0:20:21  iter: 2419  total_loss: 0.104  loss_cls: 0.060  loss_box_reg: 0.059  time: 0.4652  data_time: 0.0038  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:17:50 d2.utils.events]: [0m eta: 0:20:11  iter: 2439  total_loss: 0.113  loss_cls: 0.059  loss_box_reg: 0.053  time: 0.4652  data_time: 0.0034  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:18:00 d2.utils.events]: [0m eta: 0:20:02  iter: 2459  total_loss: 0.138  loss_cls: 0.070  loss_box_reg: 0.064  time: 0.4653  data_time: 0.0038  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:18:09 d2.utils.events]: [0m eta: 0:19:52  iter: 2479  total_loss: 0.101  loss_cls: 0.058  loss_box_reg: 0.046  time: 0.4653  data_time: 0.0039  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:18:18 d2.utils.events]: [0m eta: 0:19:43  iter: 2499  total_loss: 0.111  loss_cls: 0.059  loss_box_reg: 0.052  time: 0.4653  data_time: 0.0044  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:18:28 d2.utils.events]: [0m eta: 0:19:33  iter: 2519  total_loss: 0.124  loss_cls: 0.062  loss_box_reg: 0.056  time: 0.4653  data_time: 0.0038  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:18:37 d2.utils.events]: [0m eta: 0:19:23  iter: 2539  total_loss: 0.102  loss_cls: 0.056  loss_box_reg: 0.043  time: 0.4653  data_time: 0.0037  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:18:46 d2.utils.events]: [0m eta: 0:19:12  iter: 2559  total_loss: 0.102  loss_cls: 0.049  loss_box_reg: 0.052  time: 0.4652  data_time: 0.0036  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:18:56 d2.utils.events]: [0m eta: 0:19:02  iter: 2579  total_loss: 0.123  loss_cls: 0.070  loss_box_reg: 0.052  time: 0.4653  data_time: 0.0036  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:19:05 d2.utils.events]: [0m eta: 0:18:53  iter: 2599  total_loss: 0.123  loss_cls: 0.062  loss_box_reg: 0.058  time: 0.4652  data_time: 0.0038  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:19:14 d2.utils.events]: [0m eta: 0:18:45  iter: 2619  total_loss: 0.111  loss_cls: 0.058  loss_box_reg: 0.055  time: 0.4653  data_time: 0.0039  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:19:24 d2.utils.events]: [0m eta: 0:18:35  iter: 2639  total_loss: 0.115  loss_cls: 0.061  loss_box_reg: 0.049  time: 0.4652  data_time: 0.0038  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:19:33 d2.utils.events]: [0m eta: 0:18:25  iter: 2659  total_loss: 0.142  loss_cls: 0.075  loss_box_reg: 0.070  time: 0.4652  data_time: 0.0036  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:19:42 d2.utils.events]: [0m eta: 0:18:16  iter: 2679  total_loss: 0.119  loss_cls: 0.060  loss_box_reg: 0.056  time: 0.4652  data_time: 0.0037  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:19:51 d2.utils.events]: [0m eta: 0:18:06  iter: 2699  total_loss: 0.128  loss_cls: 0.066  loss_box_reg: 0.063  time: 0.4652  data_time: 0.0039  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:20:01 d2.utils.events]: [0m eta: 0:17:56  iter: 2719  total_loss: 0.099  loss_cls: 0.056  loss_box_reg: 0.045  time: 0.4652  data_time: 0.0037  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:20:10 d2.utils.events]: [0m eta: 0:17:47  iter: 2739  total_loss: 0.122  loss_cls: 0.062  loss_box_reg: 0.060  time: 0.4653  data_time: 0.0036  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:20:19 d2.utils.events]: [0m eta: 0:17:39  iter: 2759  total_loss: 0.116  loss_cls: 0.059  loss_box_reg: 0.057  time: 0.4653  data_time: 0.0038  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:20:29 d2.utils.events]: [0m eta: 0:17:30  iter: 2779  total_loss: 0.103  loss_cls: 0.060  loss_box_reg: 0.051  time: 0.4653  data_time: 0.0037  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:20:38 d2.utils.events]: [0m eta: 0:17:21  iter: 2799  total_loss: 0.108  loss_cls: 0.056  loss_box_reg: 0.059  time: 0.4653  data_time: 0.0036  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:20:47 d2.utils.events]: [0m eta: 0:17:11  iter: 2819  total_loss: 0.139  loss_cls: 0.067  loss_box_reg: 0.062  time: 0.4652  data_time: 0.0038  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:20:56 d2.utils.events]: [0m eta: 0:17:01  iter: 2839  total_loss: 0.092  loss_cls: 0.048  loss_box_reg: 0.049  time: 0.4652  data_time: 0.0034  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:21:06 d2.utils.events]: [0m eta: 0:16:52  iter: 2859  total_loss: 0.116  loss_cls: 0.053  loss_box_reg: 0.053  time: 0.4651  data_time: 0.0035  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:21:15 d2.utils.events]: [0m eta: 0:16:42  iter: 2879  total_loss: 0.132  loss_cls: 0.066  loss_box_reg: 0.067  time: 0.4651  data_time: 0.0042  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:21:24 d2.utils.events]: [0m eta: 0:16:32  iter: 2899  total_loss: 0.112  loss_cls: 0.061  loss_box_reg: 0.048  time: 0.4651  data_time: 0.0036  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:21:33 d2.utils.events]: [0m eta: 0:16:22  iter: 2919  total_loss: 0.138  loss_cls: 0.074  loss_box_reg: 0.069  time: 0.4650  data_time: 0.0044  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:21:43 d2.utils.events]: [0m eta: 0:16:13  iter: 2939  total_loss: 0.117  loss_cls: 0.061  loss_box_reg: 0.050  time: 0.4651  data_time: 0.0039  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:21:52 d2.utils.events]: [0m eta: 0:16:03  iter: 2959  total_loss: 0.113  loss_cls: 0.059  loss_box_reg: 0.056  time: 0.4650  data_time: 0.0038  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:22:01 d2.utils.events]: [0m eta: 0:15:53  iter: 2979  total_loss: 0.100  loss_cls: 0.052  loss_box_reg: 0.044  time: 0.4649  data_time: 0.0038  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:22:10 d2.utils.events]: [0m eta: 0:15:44  iter: 2999  total_loss: 0.105  loss_cls: 0.053  loss_box_reg: 0.054  time: 0.4649  data_time: 0.0035  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:22:20 d2.utils.events]: [0m eta: 0:15:35  iter: 3019  total_loss: 0.104  loss_cls: 0.056  loss_box_reg: 0.044  time: 0.4650  data_time: 0.0036  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:22:29 d2.utils.events]: [0m eta: 0:15:25  iter: 3039  total_loss: 0.093  loss_cls: 0.048  loss_box_reg: 0.048  time: 0.4649  data_time: 0.0035  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:22:38 d2.utils.events]: [0m eta: 0:15:16  iter: 3059  total_loss: 0.098  loss_cls: 0.056  loss_box_reg: 0.051  time: 0.4649  data_time: 0.0037  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:22:48 d2.utils.events]: [0m eta: 0:15:07  iter: 3079  total_loss: 0.097  loss_cls: 0.053  loss_box_reg: 0.046  time: 0.4650  data_time: 0.0037  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:22:57 d2.utils.events]: [0m eta: 0:14:57  iter: 3099  total_loss: 0.112  loss_cls: 0.048  loss_box_reg: 0.060  time: 0.4651  data_time: 0.0041  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:23:07 d2.utils.events]: [0m eta: 0:14:48  iter: 3119  total_loss: 0.098  loss_cls: 0.051  loss_box_reg: 0.051  time: 0.4651  data_time: 0.0038  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:23:16 d2.utils.events]: [0m eta: 0:14:39  iter: 3139  total_loss: 0.102  loss_cls: 0.059  loss_box_reg: 0.049  time: 0.4651  data_time: 0.0040  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:23:25 d2.utils.events]: [0m eta: 0:14:28  iter: 3159  total_loss: 0.112  loss_cls: 0.051  loss_box_reg: 0.057  time: 0.4651  data_time: 0.0042  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:23:35 d2.utils.events]: [0m eta: 0:14:19  iter: 3179  total_loss: 0.110  loss_cls: 0.054  loss_box_reg: 0.057  time: 0.4651  data_time: 0.0038  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:23:44 d2.utils.events]: [0m eta: 0:14:09  iter: 3199  total_loss: 0.111  loss_cls: 0.053  loss_box_reg: 0.060  time: 0.4650  data_time: 0.0041  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:23:53 d2.utils.events]: [0m eta: 0:13:59  iter: 3219  total_loss: 0.114  loss_cls: 0.053  loss_box_reg: 0.058  time: 0.4649  data_time: 0.0036  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:24:02 d2.utils.events]: [0m eta: 0:13:50  iter: 3239  total_loss: 0.108  loss_cls: 0.050  loss_box_reg: 0.050  time: 0.4649  data_time: 0.0036  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:24:11 d2.utils.events]: [0m eta: 0:13:40  iter: 3259  total_loss: 0.071  loss_cls: 0.040  loss_box_reg: 0.039  time: 0.4649  data_time: 0.0039  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:24:21 d2.utils.events]: [0m eta: 0:13:31  iter: 3279  total_loss: 0.109  loss_cls: 0.057  loss_box_reg: 0.053  time: 0.4649  data_time: 0.0036  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:24:30 d2.utils.events]: [0m eta: 0:13:22  iter: 3299  total_loss: 0.100  loss_cls: 0.054  loss_box_reg: 0.044  time: 0.4649  data_time: 0.0035  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:24:39 d2.utils.events]: [0m eta: 0:13:13  iter: 3319  total_loss: 0.110  loss_cls: 0.054  loss_box_reg: 0.044  time: 0.4649  data_time: 0.0039  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:24:48 d2.utils.events]: [0m eta: 0:13:03  iter: 3339  total_loss: 0.114  loss_cls: 0.057  loss_box_reg: 0.052  time: 0.4649  data_time: 0.0036  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:24:58 d2.utils.events]: [0m eta: 0:12:54  iter: 3359  total_loss: 0.120  loss_cls: 0.060  loss_box_reg: 0.048  time: 0.4649  data_time: 0.0044  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:25:07 d2.utils.events]: [0m eta: 0:12:44  iter: 3379  total_loss: 0.103  loss_cls: 0.053  loss_box_reg: 0.047  time: 0.4649  data_time: 0.0038  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:25:16 d2.utils.events]: [0m eta: 0:12:34  iter: 3399  total_loss: 0.123  loss_cls: 0.064  loss_box_reg: 0.060  time: 0.4649  data_time: 0.0038  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:25:25 d2.utils.events]: [0m eta: 0:12:24  iter: 3419  total_loss: 0.109  loss_cls: 0.051  loss_box_reg: 0.050  time: 0.4648  data_time: 0.0035  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:25:35 d2.utils.events]: [0m eta: 0:12:15  iter: 3439  total_loss: 0.111  loss_cls: 0.061  loss_box_reg: 0.052  time: 0.4648  data_time: 0.0043  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:25:44 d2.utils.events]: [0m eta: 0:12:06  iter: 3459  total_loss: 0.105  loss_cls: 0.052  loss_box_reg: 0.054  time: 0.4648  data_time: 0.0038  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:25:54 d2.utils.events]: [0m eta: 0:11:56  iter: 3479  total_loss: 0.102  loss_cls: 0.053  loss_box_reg: 0.051  time: 0.4649  data_time: 0.0038  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:26:03 d2.utils.events]: [0m eta: 0:11:47  iter: 3499  total_loss: 0.093  loss_cls: 0.047  loss_box_reg: 0.043  time: 0.4649  data_time: 0.0035  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:26:12 d2.utils.events]: [0m eta: 0:11:37  iter: 3519  total_loss: 0.118  loss_cls: 0.057  loss_box_reg: 0.063  time: 0.4647  data_time: 0.0037  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:26:21 d2.utils.events]: [0m eta: 0:11:27  iter: 3539  total_loss: 0.093  loss_cls: 0.054  loss_box_reg: 0.040  time: 0.4648  data_time: 0.0041  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:26:30 d2.utils.events]: [0m eta: 0:11:18  iter: 3559  total_loss: 0.107  loss_cls: 0.055  loss_box_reg: 0.055  time: 0.4648  data_time: 0.0038  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:26:40 d2.utils.events]: [0m eta: 0:11:09  iter: 3579  total_loss: 0.111  loss_cls: 0.057  loss_box_reg: 0.053  time: 0.4648  data_time: 0.0036  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:26:49 d2.utils.events]: [0m eta: 0:11:00  iter: 3599  total_loss: 0.091  loss_cls: 0.050  loss_box_reg: 0.042  time: 0.4648  data_time: 0.0038  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:26:58 d2.utils.events]: [0m eta: 0:10:50  iter: 3619  total_loss: 0.115  loss_cls: 0.063  loss_box_reg: 0.045  time: 0.4648  data_time: 0.0036  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:27:08 d2.utils.events]: [0m eta: 0:10:41  iter: 3639  total_loss: 0.133  loss_cls: 0.062  loss_box_reg: 0.060  time: 0.4648  data_time: 0.0035  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:27:17 d2.utils.events]: [0m eta: 0:10:31  iter: 3659  total_loss: 0.111  loss_cls: 0.058  loss_box_reg: 0.055  time: 0.4648  data_time: 0.0036  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:27:26 d2.utils.events]: [0m eta: 0:10:22  iter: 3679  total_loss: 0.114  loss_cls: 0.054  loss_box_reg: 0.058  time: 0.4648  data_time: 0.0036  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:27:35 d2.utils.events]: [0m eta: 0:10:13  iter: 3699  total_loss: 0.107  loss_cls: 0.059  loss_box_reg: 0.047  time: 0.4648  data_time: 0.0036  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:27:45 d2.utils.events]: [0m eta: 0:10:04  iter: 3719  total_loss: 0.107  loss_cls: 0.054  loss_box_reg: 0.053  time: 0.4648  data_time: 0.0037  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:27:54 d2.utils.events]: [0m eta: 0:09:54  iter: 3739  total_loss: 0.083  loss_cls: 0.041  loss_box_reg: 0.042  time: 0.4648  data_time: 0.0036  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:28:04 d2.utils.events]: [0m eta: 0:09:45  iter: 3759  total_loss: 0.078  loss_cls: 0.044  loss_box_reg: 0.039  time: 0.4649  data_time: 0.0038  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:28:13 d2.utils.events]: [0m eta: 0:09:35  iter: 3779  total_loss: 0.100  loss_cls: 0.047  loss_box_reg: 0.054  time: 0.4648  data_time: 0.0037  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:28:22 d2.utils.events]: [0m eta: 0:09:25  iter: 3799  total_loss: 0.107  loss_cls: 0.043  loss_box_reg: 0.053  time: 0.4648  data_time: 0.0037  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:28:32 d2.utils.events]: [0m eta: 0:09:16  iter: 3819  total_loss: 0.110  loss_cls: 0.055  loss_box_reg: 0.053  time: 0.4648  data_time: 0.0040  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:28:41 d2.utils.events]: [0m eta: 0:09:07  iter: 3839  total_loss: 0.105  loss_cls: 0.051  loss_box_reg: 0.053  time: 0.4648  data_time: 0.0041  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:28:50 d2.utils.events]: [0m eta: 0:08:57  iter: 3859  total_loss: 0.117  loss_cls: 0.061  loss_box_reg: 0.058  time: 0.4648  data_time: 0.0038  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:28:59 d2.utils.events]: [0m eta: 0:08:48  iter: 3879  total_loss: 0.096  loss_cls: 0.044  loss_box_reg: 0.048  time: 0.4648  data_time: 0.0039  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:29:09 d2.utils.events]: [0m eta: 0:08:39  iter: 3899  total_loss: 0.106  loss_cls: 0.058  loss_box_reg: 0.049  time: 0.4649  data_time: 0.0037  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:29:18 d2.utils.events]: [0m eta: 0:08:30  iter: 3919  total_loss: 0.102  loss_cls: 0.052  loss_box_reg: 0.045  time: 0.4648  data_time: 0.0037  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:29:27 d2.utils.events]: [0m eta: 0:08:20  iter: 3939  total_loss: 0.104  loss_cls: 0.054  loss_box_reg: 0.052  time: 0.4648  data_time: 0.0037  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:29:37 d2.utils.events]: [0m eta: 0:08:11  iter: 3959  total_loss: 0.085  loss_cls: 0.040  loss_box_reg: 0.041  time: 0.4648  data_time: 0.0036  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:29:47 d2.utils.events]: [0m eta: 0:08:02  iter: 3979  total_loss: 0.097  loss_cls: 0.051  loss_box_reg: 0.046  time: 0.4650  data_time: 0.0037  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:29:56 d2.utils.events]: [0m eta: 0:07:53  iter: 3999  total_loss: 0.109  loss_cls: 0.053  loss_box_reg: 0.050  time: 0.4650  data_time: 0.0036  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:30:06 d2.utils.events]: [0m eta: 0:07:44  iter: 4019  total_loss: 0.096  loss_cls: 0.046  loss_box_reg: 0.046  time: 0.4651  data_time: 0.0039  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:30:16 d2.utils.events]: [0m eta: 0:07:34  iter: 4039  total_loss: 0.085  loss_cls: 0.045  loss_box_reg: 0.041  time: 0.4652  data_time: 0.0044  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:30:25 d2.utils.events]: [0m eta: 0:07:25  iter: 4059  total_loss: 0.095  loss_cls: 0.052  loss_box_reg: 0.046  time: 0.4653  data_time: 0.0041  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:30:34 d2.utils.events]: [0m eta: 0:07:15  iter: 4079  total_loss: 0.093  loss_cls: 0.045  loss_box_reg: 0.045  time: 0.4653  data_time: 0.0041  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:30:44 d2.utils.events]: [0m eta: 0:07:06  iter: 4099  total_loss: 0.096  loss_cls: 0.053  loss_box_reg: 0.043  time: 0.4654  data_time: 0.0044  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:30:53 d2.utils.events]: [0m eta: 0:06:56  iter: 4119  total_loss: 0.112  loss_cls: 0.055  loss_box_reg: 0.054  time: 0.4653  data_time: 0.0044  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:31:03 d2.utils.events]: [0m eta: 0:06:47  iter: 4139  total_loss: 0.103  loss_cls: 0.048  loss_box_reg: 0.050  time: 0.4653  data_time: 0.0044  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:31:12 d2.utils.events]: [0m eta: 0:06:38  iter: 4159  total_loss: 0.102  loss_cls: 0.049  loss_box_reg: 0.049  time: 0.4653  data_time: 0.0046  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:31:21 d2.utils.events]: [0m eta: 0:06:28  iter: 4179  total_loss: 0.109  loss_cls: 0.053  loss_box_reg: 0.057  time: 0.4653  data_time: 0.0047  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:31:31 d2.utils.events]: [0m eta: 0:06:19  iter: 4199  total_loss: 0.083  loss_cls: 0.045  loss_box_reg: 0.039  time: 0.4654  data_time: 0.0045  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:31:40 d2.utils.events]: [0m eta: 0:06:10  iter: 4219  total_loss: 0.117  loss_cls: 0.052  loss_box_reg: 0.054  time: 0.4654  data_time: 0.0055  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:31:50 d2.utils.events]: [0m eta: 0:06:00  iter: 4239  total_loss: 0.103  loss_cls: 0.045  loss_box_reg: 0.052  time: 0.4654  data_time: 0.0045  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:31:59 d2.utils.events]: [0m eta: 0:05:51  iter: 4259  total_loss: 0.112  loss_cls: 0.051  loss_box_reg: 0.059  time: 0.4654  data_time: 0.0047  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:32:08 d2.utils.events]: [0m eta: 0:05:41  iter: 4279  total_loss: 0.080  loss_cls: 0.041  loss_box_reg: 0.042  time: 0.4654  data_time: 0.0045  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:32:18 d2.utils.events]: [0m eta: 0:05:32  iter: 4299  total_loss: 0.097  loss_cls: 0.046  loss_box_reg: 0.050  time: 0.4656  data_time: 0.0048  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:32:28 d2.utils.events]: [0m eta: 0:05:23  iter: 4319  total_loss: 0.095  loss_cls: 0.046  loss_box_reg: 0.048  time: 0.4656  data_time: 0.0044  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:32:37 d2.utils.events]: [0m eta: 0:05:13  iter: 4339  total_loss: 0.092  loss_cls: 0.050  loss_box_reg: 0.044  time: 0.4656  data_time: 0.0045  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:32:47 d2.utils.events]: [0m eta: 0:05:04  iter: 4359  total_loss: 0.099  loss_cls: 0.054  loss_box_reg: 0.043  time: 0.4657  data_time: 0.0049  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:32:57 d2.utils.events]: [0m eta: 0:04:55  iter: 4379  total_loss: 0.097  loss_cls: 0.050  loss_box_reg: 0.051  time: 0.4658  data_time: 0.0045  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:33:06 d2.utils.events]: [0m eta: 0:04:45  iter: 4399  total_loss: 0.100  loss_cls: 0.050  loss_box_reg: 0.047  time: 0.4658  data_time: 0.0042  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:33:15 d2.utils.events]: [0m eta: 0:04:36  iter: 4419  total_loss: 0.103  loss_cls: 0.051  loss_box_reg: 0.053  time: 0.4657  data_time: 0.0040  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:33:24 d2.utils.events]: [0m eta: 0:04:26  iter: 4439  total_loss: 0.087  loss_cls: 0.043  loss_box_reg: 0.040  time: 0.4657  data_time: 0.0043  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:33:33 d2.utils.events]: [0m eta: 0:04:17  iter: 4459  total_loss: 0.110  loss_cls: 0.051  loss_box_reg: 0.052  time: 0.4657  data_time: 0.0042  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:33:43 d2.utils.events]: [0m eta: 0:04:07  iter: 4479  total_loss: 0.083  loss_cls: 0.043  loss_box_reg: 0.035  time: 0.4657  data_time: 0.0046  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:33:52 d2.utils.events]: [0m eta: 0:03:58  iter: 4499  total_loss: 0.097  loss_cls: 0.045  loss_box_reg: 0.049  time: 0.4657  data_time: 0.0044  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:34:02 d2.utils.events]: [0m eta: 0:03:49  iter: 4519  total_loss: 0.096  loss_cls: 0.041  loss_box_reg: 0.050  time: 0.4657  data_time: 0.0042  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:34:11 d2.utils.events]: [0m eta: 0:03:39  iter: 4539  total_loss: 0.089  loss_cls: 0.050  loss_box_reg: 0.042  time: 0.4658  data_time: 0.0043  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:34:20 d2.utils.events]: [0m eta: 0:03:30  iter: 4559  total_loss: 0.088  loss_cls: 0.048  loss_box_reg: 0.034  time: 0.4658  data_time: 0.0045  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:34:30 d2.utils.events]: [0m eta: 0:03:20  iter: 4579  total_loss: 0.115  loss_cls: 0.054  loss_box_reg: 0.057  time: 0.4658  data_time: 0.0044  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:34:39 d2.utils.events]: [0m eta: 0:03:11  iter: 4599  total_loss: 0.090  loss_cls: 0.051  loss_box_reg: 0.043  time: 0.4658  data_time: 0.0045  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:34:48 d2.utils.events]: [0m eta: 0:03:01  iter: 4619  total_loss: 0.091  loss_cls: 0.050  loss_box_reg: 0.042  time: 0.4658  data_time: 0.0044  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:34:58 d2.utils.events]: [0m eta: 0:02:51  iter: 4639  total_loss: 0.088  loss_cls: 0.052  loss_box_reg: 0.038  time: 0.4658  data_time: 0.0042  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:35:07 d2.utils.events]: [0m eta: 0:02:42  iter: 4659  total_loss: 0.111  loss_cls: 0.059  loss_box_reg: 0.055  time: 0.4658  data_time: 0.0042  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:35:16 d2.utils.events]: [0m eta: 0:02:32  iter: 4679  total_loss: 0.082  loss_cls: 0.043  loss_box_reg: 0.046  time: 0.4657  data_time: 0.0041  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:35:26 d2.utils.events]: [0m eta: 0:02:23  iter: 4699  total_loss: 0.097  loss_cls: 0.050  loss_box_reg: 0.047  time: 0.4658  data_time: 0.0042  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:35:35 d2.utils.events]: [0m eta: 0:02:13  iter: 4719  total_loss: 0.096  loss_cls: 0.048  loss_box_reg: 0.043  time: 0.4658  data_time: 0.0046  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:35:44 d2.utils.events]: [0m eta: 0:02:04  iter: 4739  total_loss: 0.096  loss_cls: 0.054  loss_box_reg: 0.045  time: 0.4658  data_time: 0.0045  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:35:54 d2.utils.events]: [0m eta: 0:01:54  iter: 4759  total_loss: 0.098  loss_cls: 0.050  loss_box_reg: 0.044  time: 0.4658  data_time: 0.0045  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:36:03 d2.utils.events]: [0m eta: 0:01:45  iter: 4779  total_loss: 0.086  loss_cls: 0.047  loss_box_reg: 0.043  time: 0.4658  data_time: 0.0046  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:36:12 d2.utils.events]: [0m eta: 0:01:35  iter: 4799  total_loss: 0.087  loss_cls: 0.047  loss_box_reg: 0.040  time: 0.4658  data_time: 0.0044  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:36:22 d2.utils.events]: [0m eta: 0:01:26  iter: 4819  total_loss: 0.103  loss_cls: 0.046  loss_box_reg: 0.046  time: 0.4658  data_time: 0.0044  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:36:31 d2.utils.events]: [0m eta: 0:01:16  iter: 4839  total_loss: 0.114  loss_cls: 0.054  loss_box_reg: 0.054  time: 0.4658  data_time: 0.0046  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:36:41 d2.utils.events]: [0m eta: 0:01:07  iter: 4859  total_loss: 0.088  loss_cls: 0.042  loss_box_reg: 0.046  time: 0.4659  data_time: 0.0045  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:36:50 d2.utils.events]: [0m eta: 0:00:57  iter: 4879  total_loss: 0.089  loss_cls: 0.045  loss_box_reg: 0.046  time: 0.4659  data_time: 0.0043  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:37:00 d2.utils.events]: [0m eta: 0:00:48  iter: 4899  total_loss: 0.088  loss_cls: 0.041  loss_box_reg: 0.044  time: 0.4659  data_time: 0.0042  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:37:09 d2.utils.events]: [0m eta: 0:00:38  iter: 4919  total_loss: 0.096  loss_cls: 0.050  loss_box_reg: 0.047  time: 0.4659  data_time: 0.0044  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:37:19 d2.utils.events]: [0m eta: 0:00:29  iter: 4939  total_loss: 0.091  loss_cls: 0.051  loss_box_reg: 0.043  time: 0.4660  data_time: 0.0050  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:37:28 d2.utils.events]: [0m eta: 0:00:19  iter: 4959  total_loss: 0.112  loss_cls: 0.054  loss_box_reg: 0.050  time: 0.4659  data_time: 0.0045  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:37:37 d2.utils.events]: [0m eta: 0:00:09  iter: 4979  total_loss: 0.088  loss_cls: 0.044  loss_box_reg: 0.044  time: 0.4659  data_time: 0.0046  lr: 0.000250  max_mem: 4671M
Loading sequence 0005
0005
Loaded 837 images!
[32m[03/15 15:37:58 d2.data.build]: [0mDistribution of instances among all 3 categories:
[36m|  category  | #instances   |  category  | #instances   |  category  | #instances   |
|:----------:|:-------------|:----------:|:-------------|:----------:|:-------------|
|    None    | 0            |    Car     | 0            | Pedestrian | 6570         |
|            |              |            |              |            |              |
|   total    | 6570         |            |              |            |              |[0m
[32m[03/15 15:37:58 d2.data.common]: [0mSerializing 837 elements to byte tensors and concatenating them all ...
[32m[03/15 15:37:58 d2.data.common]: [0mSerialized dataset takes 0.84 MiB
[5m[31mWARNING[0m [32m[03/15 15:37:58 d2.engine.defaults]: [0mNo evaluator found. Use `DefaultTrainer.test(evaluators=)`, or implement its `build_evaluator` method.
[32m[03/15 15:37:58 d2.utils.events]: [0m eta: 0:00:00  iter: 4999  total_loss: 0.089  loss_cls: 0.049  loss_box_reg: 0.043  time: 0.4659  data_time: 0.0046  lr: 0.000250  max_mem: 4671M
[32m[03/15 15:37:58 d2.engine.hooks]: [0mOverall training speed: 4997 iterations in 0:38:48 (0.4660 s / it)
[32m[03/15 15:37:58 d2.engine.hooks]: [0mTotal training time: 0:39:03 (0:00:14 on hooks)
Loading sequence 0005
0005
Loaded 837 images!
