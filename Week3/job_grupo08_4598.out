Metadata(name='KITTI_MOTS_train', thing_classes=['None', 'Car', 'Pedestrian'])
Loading sequence 0000
Loading sequence 0001
Loading sequence 0003
Loading sequence 0004
Loading sequence 0005
Loading sequence 0009
Loading sequence 0011
Loading sequence 0012
Loading sequence 0015
Loading sequence 0017
Loading sequence 0019
Loading sequence 0020
0000
0001
0003
0004
0005
0009
0011
0012
0015
0017
0019
0020
Loaded 5007 images!
[32m[03/15 13:24:10 d2.engine.defaults]: [0mModel:
RetinaNet(
  (backbone): FPN(
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelP6P7(
      (p6): Conv2d(2048, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (p7): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    )
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (6): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (7): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (8): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (9): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (10): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (11): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (12): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (13): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (14): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (15): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (16): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (17): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (18): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (19): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (20): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (21): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (22): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (head): RetinaNetHead(
    (cls_subnet): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
      (4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): ReLU()
      (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (7): ReLU()
    )
    (bbox_subnet): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU()
      (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU()
      (4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): ReLU()
      (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (7): ReLU()
    )
    (cls_score): Conv2d(256, 720, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (bbox_pred): Conv2d(256, 36, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (anchor_generator): DefaultAnchorGenerator(
    (cell_anchors): BufferList()
  )
)
Loading sequence 0000
Loading sequence 0001
Loading sequence 0003
Loading sequence 0004
Loading sequence 0005
Loading sequence 0009
Loading sequence 0011
Loading sequence 0012
Loading sequence 0015
Loading sequence 0017
Loading sequence 0019
Loading sequence 0020
0000
0001
0003
0004
0005
0009
0011
0012
0015
0017
0019
0020
Loaded 5007 images!
[32m[03/15 13:25:08 d2.data.build]: [0mRemoved 487 images with no usable annotations. 4520 images left.
[32m[03/15 13:25:09 d2.data.build]: [0mDistribution of instances among all 3 categories:
[36m|  category  | #instances   |  category  | #instances   |  category  | #instances   |
|:----------:|:-------------|:----------:|:-------------|:----------:|:-------------|
|    None    | 0            |    Car     | 18831        | Pedestrian | 8068         |
|            |              |            |              |            |              |
|   total    | 26899        |            |              |            |              |[0m
[32m[03/15 13:25:09 d2.data.common]: [0mSerializing 4520 elements to byte tensors and concatenating them all ...
[32m[03/15 13:25:09 d2.data.common]: [0mSerialized dataset takes 3.77 MiB
[32m[03/15 13:25:09 d2.data.detection_utils]: [0mTransformGens used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[32m[03/15 13:25:09 d2.data.build]: [0mUsing training sampler TrainingSampler
[32m[03/15 13:25:10 d2.engine.train_loop]: [0mStarting training from iteration 0
[32m[03/15 13:25:17 d2.utils.events]: [0m eta: 0:23:20  iter: 19  total_loss: 2.585  loss_cls: 2.505  loss_box_reg: 0.081  time: 0.2811  data_time: 0.0157  lr: 0.000005  max_mem: 2878M
[32m[03/15 13:25:23 d2.utils.events]: [0m eta: 0:23:13  iter: 39  total_loss: 1.637  loss_cls: 1.562  loss_box_reg: 0.060  time: 0.2808  data_time: 0.0048  lr: 0.000010  max_mem: 2878M
[32m[03/15 13:25:29 d2.utils.events]: [0m eta: 0:23:08  iter: 59  total_loss: 1.328  loss_cls: 1.190  loss_box_reg: 0.081  time: 0.2807  data_time: 0.0042  lr: 0.000015  max_mem: 2878M
[32m[03/15 13:25:34 d2.utils.events]: [0m eta: 0:23:03  iter: 79  total_loss: 1.081  loss_cls: 1.012  loss_box_reg: 0.094  time: 0.2807  data_time: 0.0045  lr: 0.000020  max_mem: 2878M
[32m[03/15 13:25:40 d2.utils.events]: [0m eta: 0:22:57  iter: 99  total_loss: 0.550  loss_cls: 0.481  loss_box_reg: 0.052  time: 0.2808  data_time: 0.0042  lr: 0.000025  max_mem: 2879M
[32m[03/15 13:25:46 d2.utils.events]: [0m eta: 0:22:53  iter: 119  total_loss: 0.619  loss_cls: 0.540  loss_box_reg: 0.079  time: 0.2813  data_time: 0.0043  lr: 0.000030  max_mem: 2879M
[32m[03/15 13:25:51 d2.utils.events]: [0m eta: 0:22:48  iter: 139  total_loss: 0.337  loss_cls: 0.253  loss_box_reg: 0.061  time: 0.2817  data_time: 0.0042  lr: 0.000035  max_mem: 2879M
[32m[03/15 13:25:57 d2.utils.events]: [0m eta: 0:22:44  iter: 159  total_loss: 0.295  loss_cls: 0.239  loss_box_reg: 0.051  time: 0.2820  data_time: 0.0042  lr: 0.000040  max_mem: 2879M
[32m[03/15 13:26:03 d2.utils.events]: [0m eta: 0:22:40  iter: 179  total_loss: 0.304  loss_cls: 0.221  loss_box_reg: 0.083  time: 0.2823  data_time: 0.0042  lr: 0.000045  max_mem: 2879M
[32m[03/15 13:26:08 d2.utils.events]: [0m eta: 0:22:37  iter: 199  total_loss: 0.307  loss_cls: 0.247  loss_box_reg: 0.062  time: 0.2826  data_time: 0.0041  lr: 0.000050  max_mem: 2879M
[32m[03/15 13:26:14 d2.utils.events]: [0m eta: 0:22:33  iter: 219  total_loss: 0.270  loss_cls: 0.199  loss_box_reg: 0.054  time: 0.2829  data_time: 0.0043  lr: 0.000055  max_mem: 2879M
[32m[03/15 13:26:20 d2.utils.events]: [0m eta: 0:22:28  iter: 239  total_loss: 0.203  loss_cls: 0.163  loss_box_reg: 0.043  time: 0.2832  data_time: 0.0038  lr: 0.000060  max_mem: 2879M
[32m[03/15 13:26:26 d2.utils.events]: [0m eta: 0:22:23  iter: 259  total_loss: 0.296  loss_cls: 0.188  loss_box_reg: 0.065  time: 0.2833  data_time: 0.0044  lr: 0.000065  max_mem: 2879M
[32m[03/15 13:26:31 d2.utils.events]: [0m eta: 0:22:18  iter: 279  total_loss: 0.234  loss_cls: 0.148  loss_box_reg: 0.070  time: 0.2835  data_time: 0.0042  lr: 0.000070  max_mem: 2879M
[32m[03/15 13:26:37 d2.utils.events]: [0m eta: 0:22:14  iter: 299  total_loss: 0.240  loss_cls: 0.153  loss_box_reg: 0.066  time: 0.2838  data_time: 0.0040  lr: 0.000075  max_mem: 2879M
[32m[03/15 13:26:43 d2.utils.events]: [0m eta: 0:22:09  iter: 319  total_loss: 0.210  loss_cls: 0.172  loss_box_reg: 0.051  time: 0.2840  data_time: 0.0044  lr: 0.000080  max_mem: 2879M
[32m[03/15 13:26:49 d2.utils.events]: [0m eta: 0:22:05  iter: 339  total_loss: 0.172  loss_cls: 0.110  loss_box_reg: 0.069  time: 0.2842  data_time: 0.0039  lr: 0.000085  max_mem: 2879M
[32m[03/15 13:26:54 d2.utils.events]: [0m eta: 0:22:00  iter: 359  total_loss: 0.188  loss_cls: 0.135  loss_box_reg: 0.059  time: 0.2842  data_time: 0.0059  lr: 0.000090  max_mem: 2879M
[32m[03/15 13:27:00 d2.utils.events]: [0m eta: 0:21:55  iter: 379  total_loss: 0.237  loss_cls: 0.155  loss_box_reg: 0.068  time: 0.2844  data_time: 0.0045  lr: 0.000095  max_mem: 2879M
[32m[03/15 13:27:06 d2.utils.events]: [0m eta: 0:21:50  iter: 399  total_loss: 0.184  loss_cls: 0.143  loss_box_reg: 0.041  time: 0.2845  data_time: 0.0051  lr: 0.000100  max_mem: 2879M
[32m[03/15 13:27:12 d2.utils.events]: [0m eta: 0:21:45  iter: 419  total_loss: 0.192  loss_cls: 0.139  loss_box_reg: 0.067  time: 0.2847  data_time: 0.0045  lr: 0.000105  max_mem: 2879M
[32m[03/15 13:27:17 d2.utils.events]: [0m eta: 0:21:40  iter: 439  total_loss: 0.272  loss_cls: 0.179  loss_box_reg: 0.094  time: 0.2852  data_time: 0.0046  lr: 0.000110  max_mem: 2879M
[32m[03/15 13:27:23 d2.utils.events]: [0m eta: 0:21:35  iter: 459  total_loss: 0.169  loss_cls: 0.105  loss_box_reg: 0.064  time: 0.2853  data_time: 0.0047  lr: 0.000115  max_mem: 2879M
[32m[03/15 13:27:29 d2.utils.events]: [0m eta: 0:21:29  iter: 479  total_loss: 0.195  loss_cls: 0.118  loss_box_reg: 0.066  time: 0.2854  data_time: 0.0053  lr: 0.000120  max_mem: 2879M
[32m[03/15 13:27:35 d2.utils.events]: [0m eta: 0:21:24  iter: 499  total_loss: 0.142  loss_cls: 0.089  loss_box_reg: 0.046  time: 0.2858  data_time: 0.0045  lr: 0.000125  max_mem: 2879M
[32m[03/15 13:27:41 d2.utils.events]: [0m eta: 0:21:19  iter: 519  total_loss: 0.118  loss_cls: 0.088  loss_box_reg: 0.038  time: 0.2862  data_time: 0.0040  lr: 0.000130  max_mem: 2879M
[32m[03/15 13:27:47 d2.utils.events]: [0m eta: 0:21:15  iter: 539  total_loss: 0.226  loss_cls: 0.133  loss_box_reg: 0.074  time: 0.2866  data_time: 0.0049  lr: 0.000135  max_mem: 2879M
[32m[03/15 13:27:53 d2.utils.events]: [0m eta: 0:21:09  iter: 559  total_loss: 0.153  loss_cls: 0.091  loss_box_reg: 0.062  time: 0.2867  data_time: 0.0045  lr: 0.000140  max_mem: 2879M
[32m[03/15 13:27:59 d2.utils.events]: [0m eta: 0:21:04  iter: 579  total_loss: 0.152  loss_cls: 0.102  loss_box_reg: 0.055  time: 0.2871  data_time: 0.0041  lr: 0.000145  max_mem: 2879M
[32m[03/15 13:28:04 d2.utils.events]: [0m eta: 0:20:59  iter: 599  total_loss: 0.192  loss_cls: 0.106  loss_box_reg: 0.061  time: 0.2872  data_time: 0.0041  lr: 0.000150  max_mem: 2879M
[32m[03/15 13:28:10 d2.utils.events]: [0m eta: 0:20:54  iter: 619  total_loss: 0.197  loss_cls: 0.127  loss_box_reg: 0.062  time: 0.2874  data_time: 0.0040  lr: 0.000155  max_mem: 2879M
[32m[03/15 13:28:16 d2.utils.events]: [0m eta: 0:20:49  iter: 639  total_loss: 0.205  loss_cls: 0.136  loss_box_reg: 0.070  time: 0.2876  data_time: 0.0045  lr: 0.000160  max_mem: 2879M
[32m[03/15 13:28:22 d2.utils.events]: [0m eta: 0:20:43  iter: 659  total_loss: 0.157  loss_cls: 0.110  loss_box_reg: 0.060  time: 0.2878  data_time: 0.0043  lr: 0.000165  max_mem: 2879M
[32m[03/15 13:28:28 d2.utils.events]: [0m eta: 0:20:38  iter: 679  total_loss: 0.115  loss_cls: 0.083  loss_box_reg: 0.035  time: 0.2879  data_time: 0.0040  lr: 0.000170  max_mem: 2879M
[32m[03/15 13:28:34 d2.utils.events]: [0m eta: 0:20:33  iter: 699  total_loss: 0.143  loss_cls: 0.087  loss_box_reg: 0.049  time: 0.2881  data_time: 0.0039  lr: 0.000175  max_mem: 2879M
[32m[03/15 13:28:40 d2.utils.events]: [0m eta: 0:20:27  iter: 719  total_loss: 0.135  loss_cls: 0.088  loss_box_reg: 0.049  time: 0.2884  data_time: 0.0044  lr: 0.000180  max_mem: 2879M
[32m[03/15 13:28:46 d2.utils.events]: [0m eta: 0:20:22  iter: 739  total_loss: 0.126  loss_cls: 0.084  loss_box_reg: 0.047  time: 0.2885  data_time: 0.0042  lr: 0.000185  max_mem: 2879M
[32m[03/15 13:28:52 d2.utils.events]: [0m eta: 0:20:17  iter: 759  total_loss: 0.130  loss_cls: 0.085  loss_box_reg: 0.051  time: 0.2887  data_time: 0.0042  lr: 0.000190  max_mem: 2879M
[32m[03/15 13:28:58 d2.utils.events]: [0m eta: 0:20:11  iter: 779  total_loss: 0.136  loss_cls: 0.086  loss_box_reg: 0.051  time: 0.2888  data_time: 0.0045  lr: 0.000195  max_mem: 2879M
[32m[03/15 13:29:03 d2.utils.events]: [0m eta: 0:20:06  iter: 799  total_loss: 0.135  loss_cls: 0.078  loss_box_reg: 0.048  time: 0.2890  data_time: 0.0043  lr: 0.000200  max_mem: 2879M
[32m[03/15 13:29:09 d2.utils.events]: [0m eta: 0:20:00  iter: 819  total_loss: 0.134  loss_cls: 0.086  loss_box_reg: 0.050  time: 0.2891  data_time: 0.0039  lr: 0.000205  max_mem: 2879M
[32m[03/15 13:29:15 d2.utils.events]: [0m eta: 0:19:54  iter: 839  total_loss: 0.144  loss_cls: 0.110  loss_box_reg: 0.049  time: 0.2892  data_time: 0.0042  lr: 0.000210  max_mem: 2879M
[32m[03/15 13:29:21 d2.utils.events]: [0m eta: 0:19:49  iter: 859  total_loss: 0.161  loss_cls: 0.105  loss_box_reg: 0.048  time: 0.2892  data_time: 0.0039  lr: 0.000215  max_mem: 2879M
[32m[03/15 13:29:27 d2.utils.events]: [0m eta: 0:19:43  iter: 879  total_loss: 0.115  loss_cls: 0.066  loss_box_reg: 0.048  time: 0.2894  data_time: 0.0040  lr: 0.000220  max_mem: 2879M
[32m[03/15 13:29:33 d2.utils.events]: [0m eta: 0:19:38  iter: 899  total_loss: 0.222  loss_cls: 0.129  loss_box_reg: 0.066  time: 0.2896  data_time: 0.0040  lr: 0.000225  max_mem: 2879M
[32m[03/15 13:29:39 d2.utils.events]: [0m eta: 0:19:32  iter: 919  total_loss: 0.155  loss_cls: 0.092  loss_box_reg: 0.052  time: 0.2896  data_time: 0.0042  lr: 0.000230  max_mem: 2879M
[32m[03/15 13:29:45 d2.utils.events]: [0m eta: 0:19:26  iter: 939  total_loss: 0.184  loss_cls: 0.109  loss_box_reg: 0.076  time: 0.2897  data_time: 0.0044  lr: 0.000235  max_mem: 2879M
[32m[03/15 13:29:51 d2.utils.events]: [0m eta: 0:19:21  iter: 959  total_loss: 0.152  loss_cls: 0.077  loss_box_reg: 0.057  time: 0.2898  data_time: 0.0038  lr: 0.000240  max_mem: 2879M
[32m[03/15 13:29:56 d2.utils.events]: [0m eta: 0:19:16  iter: 979  total_loss: 0.165  loss_cls: 0.103  loss_box_reg: 0.059  time: 0.2899  data_time: 0.0040  lr: 0.000245  max_mem: 2879M
[32m[03/15 13:30:02 d2.utils.events]: [0m eta: 0:19:10  iter: 999  total_loss: 0.145  loss_cls: 0.079  loss_box_reg: 0.061  time: 0.2899  data_time: 0.0038  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:30:12 d2.utils.events]: [0m eta: 0:19:04  iter: 1019  total_loss: 0.139  loss_cls: 0.076  loss_box_reg: 0.055  time: 0.2920  data_time: 0.1183  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:30:19 d2.utils.events]: [0m eta: 0:18:59  iter: 1039  total_loss: 0.129  loss_cls: 0.081  loss_box_reg: 0.041  time: 0.2918  data_time: 0.0043  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:30:25 d2.utils.events]: [0m eta: 0:18:53  iter: 1059  total_loss: 0.120  loss_cls: 0.082  loss_box_reg: 0.047  time: 0.2918  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:30:32 d2.utils.events]: [0m eta: 0:18:48  iter: 1079  total_loss: 0.155  loss_cls: 0.093  loss_box_reg: 0.060  time: 0.2927  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:30:38 d2.utils.events]: [0m eta: 0:18:42  iter: 1099  total_loss: 0.165  loss_cls: 0.092  loss_box_reg: 0.069  time: 0.2927  data_time: 0.0051  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:30:44 d2.utils.events]: [0m eta: 0:18:37  iter: 1119  total_loss: 0.107  loss_cls: 0.066  loss_box_reg: 0.040  time: 0.2926  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:30:49 d2.utils.events]: [0m eta: 0:18:31  iter: 1139  total_loss: 0.181  loss_cls: 0.095  loss_box_reg: 0.076  time: 0.2926  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:30:55 d2.utils.events]: [0m eta: 0:18:26  iter: 1159  total_loss: 0.111  loss_cls: 0.065  loss_box_reg: 0.036  time: 0.2927  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:31:01 d2.utils.events]: [0m eta: 0:18:21  iter: 1179  total_loss: 0.160  loss_cls: 0.100  loss_box_reg: 0.056  time: 0.2928  data_time: 0.0049  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:31:07 d2.utils.events]: [0m eta: 0:18:15  iter: 1199  total_loss: 0.145  loss_cls: 0.079  loss_box_reg: 0.059  time: 0.2928  data_time: 0.0040  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:31:13 d2.utils.events]: [0m eta: 0:18:10  iter: 1219  total_loss: 0.133  loss_cls: 0.093  loss_box_reg: 0.048  time: 0.2928  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:31:19 d2.utils.events]: [0m eta: 0:18:05  iter: 1239  total_loss: 0.119  loss_cls: 0.068  loss_box_reg: 0.050  time: 0.2928  data_time: 0.0044  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:31:25 d2.utils.events]: [0m eta: 0:17:59  iter: 1259  total_loss: 0.114  loss_cls: 0.059  loss_box_reg: 0.045  time: 0.2928  data_time: 0.0044  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:31:31 d2.utils.events]: [0m eta: 0:17:54  iter: 1279  total_loss: 0.170  loss_cls: 0.096  loss_box_reg: 0.066  time: 0.2928  data_time: 0.0043  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:31:36 d2.utils.events]: [0m eta: 0:17:48  iter: 1299  total_loss: 0.122  loss_cls: 0.064  loss_box_reg: 0.058  time: 0.2927  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:31:42 d2.utils.events]: [0m eta: 0:17:43  iter: 1319  total_loss: 0.147  loss_cls: 0.087  loss_box_reg: 0.061  time: 0.2928  data_time: 0.0044  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:31:48 d2.utils.events]: [0m eta: 0:17:38  iter: 1339  total_loss: 0.148  loss_cls: 0.075  loss_box_reg: 0.051  time: 0.2928  data_time: 0.0044  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:31:54 d2.utils.events]: [0m eta: 0:17:32  iter: 1359  total_loss: 0.134  loss_cls: 0.071  loss_box_reg: 0.053  time: 0.2930  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:32:00 d2.utils.events]: [0m eta: 0:17:27  iter: 1379  total_loss: 0.113  loss_cls: 0.071  loss_box_reg: 0.039  time: 0.2930  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:32:06 d2.utils.events]: [0m eta: 0:17:21  iter: 1399  total_loss: 0.096  loss_cls: 0.052  loss_box_reg: 0.042  time: 0.2931  data_time: 0.0043  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:32:12 d2.utils.events]: [0m eta: 0:17:16  iter: 1419  total_loss: 0.143  loss_cls: 0.075  loss_box_reg: 0.052  time: 0.2931  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:32:18 d2.utils.events]: [0m eta: 0:17:10  iter: 1439  total_loss: 0.147  loss_cls: 0.080  loss_box_reg: 0.061  time: 0.2932  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:32:24 d2.utils.events]: [0m eta: 0:17:05  iter: 1459  total_loss: 0.140  loss_cls: 0.100  loss_box_reg: 0.048  time: 0.2932  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:32:30 d2.utils.events]: [0m eta: 0:17:00  iter: 1479  total_loss: 0.139  loss_cls: 0.085  loss_box_reg: 0.058  time: 0.2933  data_time: 0.0040  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:32:36 d2.utils.events]: [0m eta: 0:16:54  iter: 1499  total_loss: 0.151  loss_cls: 0.089  loss_box_reg: 0.055  time: 0.2933  data_time: 0.0043  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:32:42 d2.utils.events]: [0m eta: 0:16:48  iter: 1519  total_loss: 0.132  loss_cls: 0.071  loss_box_reg: 0.055  time: 0.2933  data_time: 0.0047  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:32:48 d2.utils.events]: [0m eta: 0:16:42  iter: 1539  total_loss: 0.135  loss_cls: 0.075  loss_box_reg: 0.060  time: 0.2934  data_time: 0.0043  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:32:54 d2.utils.events]: [0m eta: 0:16:36  iter: 1559  total_loss: 0.152  loss_cls: 0.093  loss_box_reg: 0.053  time: 0.2934  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:33:00 d2.utils.events]: [0m eta: 0:16:30  iter: 1579  total_loss: 0.165  loss_cls: 0.098  loss_box_reg: 0.059  time: 0.2933  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:33:06 d2.utils.events]: [0m eta: 0:16:25  iter: 1599  total_loss: 0.138  loss_cls: 0.077  loss_box_reg: 0.052  time: 0.2934  data_time: 0.0046  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:33:11 d2.utils.events]: [0m eta: 0:16:19  iter: 1619  total_loss: 0.127  loss_cls: 0.069  loss_box_reg: 0.060  time: 0.2934  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:33:17 d2.utils.events]: [0m eta: 0:16:13  iter: 1639  total_loss: 0.105  loss_cls: 0.059  loss_box_reg: 0.040  time: 0.2935  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:33:23 d2.utils.events]: [0m eta: 0:16:07  iter: 1659  total_loss: 0.134  loss_cls: 0.063  loss_box_reg: 0.061  time: 0.2935  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:33:29 d2.utils.events]: [0m eta: 0:16:02  iter: 1679  total_loss: 0.153  loss_cls: 0.093  loss_box_reg: 0.063  time: 0.2936  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:33:35 d2.utils.events]: [0m eta: 0:15:56  iter: 1699  total_loss: 0.108  loss_cls: 0.060  loss_box_reg: 0.043  time: 0.2936  data_time: 0.0044  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:33:41 d2.utils.events]: [0m eta: 0:15:50  iter: 1719  total_loss: 0.126  loss_cls: 0.072  loss_box_reg: 0.047  time: 0.2936  data_time: 0.0044  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:33:47 d2.utils.events]: [0m eta: 0:15:45  iter: 1739  total_loss: 0.153  loss_cls: 0.081  loss_box_reg: 0.051  time: 0.2937  data_time: 0.0043  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:33:53 d2.utils.events]: [0m eta: 0:15:38  iter: 1759  total_loss: 0.104  loss_cls: 0.060  loss_box_reg: 0.042  time: 0.2937  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:33:59 d2.utils.events]: [0m eta: 0:15:33  iter: 1779  total_loss: 0.143  loss_cls: 0.086  loss_box_reg: 0.052  time: 0.2936  data_time: 0.0039  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:34:05 d2.utils.events]: [0m eta: 0:15:27  iter: 1799  total_loss: 0.118  loss_cls: 0.068  loss_box_reg: 0.040  time: 0.2936  data_time: 0.0044  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:34:11 d2.utils.events]: [0m eta: 0:15:22  iter: 1819  total_loss: 0.138  loss_cls: 0.077  loss_box_reg: 0.047  time: 0.2937  data_time: 0.0046  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:34:17 d2.utils.events]: [0m eta: 0:15:16  iter: 1839  total_loss: 0.141  loss_cls: 0.079  loss_box_reg: 0.058  time: 0.2937  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:34:23 d2.utils.events]: [0m eta: 0:15:11  iter: 1859  total_loss: 0.098  loss_cls: 0.064  loss_box_reg: 0.034  time: 0.2937  data_time: 0.0044  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:34:28 d2.utils.events]: [0m eta: 0:15:05  iter: 1879  total_loss: 0.102  loss_cls: 0.069  loss_box_reg: 0.034  time: 0.2937  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:34:34 d2.utils.events]: [0m eta: 0:14:59  iter: 1899  total_loss: 0.157  loss_cls: 0.088  loss_box_reg: 0.066  time: 0.2938  data_time: 0.0044  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:34:40 d2.utils.events]: [0m eta: 0:14:54  iter: 1919  total_loss: 0.129  loss_cls: 0.072  loss_box_reg: 0.045  time: 0.2938  data_time: 0.0043  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:34:46 d2.utils.events]: [0m eta: 0:14:49  iter: 1939  total_loss: 0.081  loss_cls: 0.056  loss_box_reg: 0.033  time: 0.2939  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:34:52 d2.utils.events]: [0m eta: 0:14:43  iter: 1959  total_loss: 0.146  loss_cls: 0.087  loss_box_reg: 0.067  time: 0.2939  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:34:58 d2.utils.events]: [0m eta: 0:14:37  iter: 1979  total_loss: 0.132  loss_cls: 0.076  loss_box_reg: 0.057  time: 0.2939  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:35:04 d2.utils.events]: [0m eta: 0:14:32  iter: 1999  total_loss: 0.108  loss_cls: 0.067  loss_box_reg: 0.038  time: 0.2939  data_time: 0.0043  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:35:10 d2.utils.events]: [0m eta: 0:14:26  iter: 2019  total_loss: 0.107  loss_cls: 0.062  loss_box_reg: 0.040  time: 0.2939  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:35:16 d2.utils.events]: [0m eta: 0:14:21  iter: 2039  total_loss: 0.112  loss_cls: 0.070  loss_box_reg: 0.043  time: 0.2939  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:35:22 d2.utils.events]: [0m eta: 0:14:16  iter: 2059  total_loss: 0.089  loss_cls: 0.050  loss_box_reg: 0.034  time: 0.2940  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:35:28 d2.utils.events]: [0m eta: 0:14:11  iter: 2079  total_loss: 0.150  loss_cls: 0.076  loss_box_reg: 0.062  time: 0.2940  data_time: 0.0040  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:35:34 d2.utils.events]: [0m eta: 0:14:05  iter: 2099  total_loss: 0.130  loss_cls: 0.071  loss_box_reg: 0.057  time: 0.2940  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:35:40 d2.utils.events]: [0m eta: 0:14:00  iter: 2119  total_loss: 0.149  loss_cls: 0.091  loss_box_reg: 0.058  time: 0.2941  data_time: 0.0044  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:35:46 d2.utils.events]: [0m eta: 0:13:55  iter: 2139  total_loss: 0.121  loss_cls: 0.072  loss_box_reg: 0.047  time: 0.2941  data_time: 0.0044  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:35:52 d2.utils.events]: [0m eta: 0:13:49  iter: 2159  total_loss: 0.084  loss_cls: 0.052  loss_box_reg: 0.026  time: 0.2941  data_time: 0.0044  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:35:58 d2.utils.events]: [0m eta: 0:13:43  iter: 2179  total_loss: 0.126  loss_cls: 0.077  loss_box_reg: 0.050  time: 0.2941  data_time: 0.0045  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:36:04 d2.utils.events]: [0m eta: 0:13:37  iter: 2199  total_loss: 0.097  loss_cls: 0.061  loss_box_reg: 0.043  time: 0.2941  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:36:10 d2.utils.events]: [0m eta: 0:13:32  iter: 2219  total_loss: 0.123  loss_cls: 0.071  loss_box_reg: 0.043  time: 0.2942  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:36:15 d2.utils.events]: [0m eta: 0:13:26  iter: 2239  total_loss: 0.151  loss_cls: 0.077  loss_box_reg: 0.072  time: 0.2942  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:36:21 d2.utils.events]: [0m eta: 0:13:20  iter: 2259  total_loss: 0.097  loss_cls: 0.058  loss_box_reg: 0.034  time: 0.2941  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:36:27 d2.utils.events]: [0m eta: 0:13:14  iter: 2279  total_loss: 0.119  loss_cls: 0.060  loss_box_reg: 0.044  time: 0.2941  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:36:33 d2.utils.events]: [0m eta: 0:13:08  iter: 2299  total_loss: 0.106  loss_cls: 0.064  loss_box_reg: 0.049  time: 0.2941  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:36:39 d2.utils.events]: [0m eta: 0:13:02  iter: 2319  total_loss: 0.055  loss_cls: 0.031  loss_box_reg: 0.025  time: 0.2941  data_time: 0.0045  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:36:45 d2.utils.events]: [0m eta: 0:12:57  iter: 2339  total_loss: 0.099  loss_cls: 0.056  loss_box_reg: 0.044  time: 0.2942  data_time: 0.0045  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:36:51 d2.utils.events]: [0m eta: 0:12:51  iter: 2359  total_loss: 0.125  loss_cls: 0.070  loss_box_reg: 0.053  time: 0.2942  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:36:57 d2.utils.events]: [0m eta: 0:12:44  iter: 2379  total_loss: 0.102  loss_cls: 0.055  loss_box_reg: 0.040  time: 0.2942  data_time: 0.0043  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:37:03 d2.utils.events]: [0m eta: 0:12:38  iter: 2399  total_loss: 0.117  loss_cls: 0.066  loss_box_reg: 0.039  time: 0.2942  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:37:09 d2.utils.events]: [0m eta: 0:12:33  iter: 2419  total_loss: 0.124  loss_cls: 0.070  loss_box_reg: 0.058  time: 0.2942  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:37:15 d2.utils.events]: [0m eta: 0:12:26  iter: 2439  total_loss: 0.096  loss_cls: 0.058  loss_box_reg: 0.040  time: 0.2942  data_time: 0.0044  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:37:20 d2.utils.events]: [0m eta: 0:12:20  iter: 2459  total_loss: 0.104  loss_cls: 0.062  loss_box_reg: 0.050  time: 0.2942  data_time: 0.0044  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:37:27 d2.utils.events]: [0m eta: 0:12:15  iter: 2479  total_loss: 0.088  loss_cls: 0.046  loss_box_reg: 0.039  time: 0.2943  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:37:33 d2.utils.events]: [0m eta: 0:12:10  iter: 2499  total_loss: 0.098  loss_cls: 0.058  loss_box_reg: 0.041  time: 0.2943  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:37:38 d2.utils.events]: [0m eta: 0:12:04  iter: 2519  total_loss: 0.093  loss_cls: 0.053  loss_box_reg: 0.037  time: 0.2943  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:37:44 d2.utils.events]: [0m eta: 0:11:58  iter: 2539  total_loss: 0.115  loss_cls: 0.071  loss_box_reg: 0.047  time: 0.2943  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:37:50 d2.utils.events]: [0m eta: 0:11:52  iter: 2559  total_loss: 0.117  loss_cls: 0.066  loss_box_reg: 0.052  time: 0.2943  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:37:56 d2.utils.events]: [0m eta: 0:11:47  iter: 2579  total_loss: 0.124  loss_cls: 0.066  loss_box_reg: 0.053  time: 0.2943  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:38:02 d2.utils.events]: [0m eta: 0:11:41  iter: 2599  total_loss: 0.119  loss_cls: 0.067  loss_box_reg: 0.050  time: 0.2944  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:38:08 d2.utils.events]: [0m eta: 0:11:35  iter: 2619  total_loss: 0.101  loss_cls: 0.056  loss_box_reg: 0.038  time: 0.2944  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:38:14 d2.utils.events]: [0m eta: 0:11:29  iter: 2639  total_loss: 0.083  loss_cls: 0.047  loss_box_reg: 0.037  time: 0.2944  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:38:20 d2.utils.events]: [0m eta: 0:11:22  iter: 2659  total_loss: 0.122  loss_cls: 0.076  loss_box_reg: 0.050  time: 0.2943  data_time: 0.0043  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:38:26 d2.utils.events]: [0m eta: 0:11:17  iter: 2679  total_loss: 0.075  loss_cls: 0.043  loss_box_reg: 0.035  time: 0.2944  data_time: 0.0044  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:38:32 d2.utils.events]: [0m eta: 0:11:12  iter: 2699  total_loss: 0.116  loss_cls: 0.054  loss_box_reg: 0.056  time: 0.2944  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:38:38 d2.utils.events]: [0m eta: 0:11:06  iter: 2719  total_loss: 0.112  loss_cls: 0.057  loss_box_reg: 0.047  time: 0.2945  data_time: 0.0043  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:38:44 d2.utils.events]: [0m eta: 0:10:59  iter: 2739  total_loss: 0.069  loss_cls: 0.038  loss_box_reg: 0.030  time: 0.2944  data_time: 0.0040  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:38:50 d2.utils.events]: [0m eta: 0:10:54  iter: 2759  total_loss: 0.135  loss_cls: 0.081  loss_box_reg: 0.049  time: 0.2945  data_time: 0.0040  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:38:56 d2.utils.events]: [0m eta: 0:10:48  iter: 2779  total_loss: 0.097  loss_cls: 0.052  loss_box_reg: 0.039  time: 0.2945  data_time: 0.0038  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:39:01 d2.utils.events]: [0m eta: 0:10:42  iter: 2799  total_loss: 0.138  loss_cls: 0.087  loss_box_reg: 0.055  time: 0.2944  data_time: 0.0040  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:39:07 d2.utils.events]: [0m eta: 0:10:36  iter: 2819  total_loss: 0.116  loss_cls: 0.065  loss_box_reg: 0.051  time: 0.2945  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:39:13 d2.utils.events]: [0m eta: 0:10:30  iter: 2839  total_loss: 0.118  loss_cls: 0.054  loss_box_reg: 0.049  time: 0.2945  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:39:19 d2.utils.events]: [0m eta: 0:10:24  iter: 2859  total_loss: 0.092  loss_cls: 0.050  loss_box_reg: 0.042  time: 0.2945  data_time: 0.0037  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:39:25 d2.utils.events]: [0m eta: 0:10:17  iter: 2879  total_loss: 0.102  loss_cls: 0.055  loss_box_reg: 0.041  time: 0.2945  data_time: 0.0040  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:39:31 d2.utils.events]: [0m eta: 0:10:12  iter: 2899  total_loss: 0.113  loss_cls: 0.070  loss_box_reg: 0.053  time: 0.2945  data_time: 0.0040  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:39:37 d2.utils.events]: [0m eta: 0:10:06  iter: 2919  total_loss: 0.118  loss_cls: 0.073  loss_box_reg: 0.045  time: 0.2945  data_time: 0.0038  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:39:43 d2.utils.events]: [0m eta: 0:10:00  iter: 2939  total_loss: 0.112  loss_cls: 0.065  loss_box_reg: 0.046  time: 0.2945  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:39:49 d2.utils.events]: [0m eta: 0:09:54  iter: 2959  total_loss: 0.182  loss_cls: 0.099  loss_box_reg: 0.063  time: 0.2946  data_time: 0.0039  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:39:55 d2.utils.events]: [0m eta: 0:09:48  iter: 2979  total_loss: 0.092  loss_cls: 0.057  loss_box_reg: 0.037  time: 0.2946  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:40:01 d2.utils.events]: [0m eta: 0:09:42  iter: 2999  total_loss: 0.102  loss_cls: 0.063  loss_box_reg: 0.042  time: 0.2946  data_time: 0.0038  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:40:09 d2.utils.events]: [0m eta: 0:09:37  iter: 3019  total_loss: 0.070  loss_cls: 0.042  loss_box_reg: 0.025  time: 0.2946  data_time: 0.0047  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:40:16 d2.utils.events]: [0m eta: 0:09:31  iter: 3039  total_loss: 0.124  loss_cls: 0.064  loss_box_reg: 0.051  time: 0.2947  data_time: 0.0296  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:40:21 d2.utils.events]: [0m eta: 0:09:24  iter: 3059  total_loss: 0.133  loss_cls: 0.070  loss_box_reg: 0.056  time: 0.2947  data_time: 0.0044  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:40:27 d2.utils.events]: [0m eta: 0:09:18  iter: 3079  total_loss: 0.087  loss_cls: 0.052  loss_box_reg: 0.040  time: 0.2946  data_time: 0.0040  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:40:33 d2.utils.events]: [0m eta: 0:09:12  iter: 3099  total_loss: 0.106  loss_cls: 0.057  loss_box_reg: 0.045  time: 0.2947  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:40:39 d2.utils.events]: [0m eta: 0:09:06  iter: 3119  total_loss: 0.088  loss_cls: 0.052  loss_box_reg: 0.038  time: 0.2947  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:40:45 d2.utils.events]: [0m eta: 0:09:00  iter: 3139  total_loss: 0.107  loss_cls: 0.056  loss_box_reg: 0.043  time: 0.2947  data_time: 0.0040  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:40:51 d2.utils.events]: [0m eta: 0:08:54  iter: 3159  total_loss: 0.094  loss_cls: 0.057  loss_box_reg: 0.046  time: 0.2946  data_time: 0.0040  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:40:57 d2.utils.events]: [0m eta: 0:08:48  iter: 3179  total_loss: 0.075  loss_cls: 0.041  loss_box_reg: 0.037  time: 0.2947  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:41:03 d2.utils.events]: [0m eta: 0:08:43  iter: 3199  total_loss: 0.131  loss_cls: 0.066  loss_box_reg: 0.059  time: 0.2946  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:41:09 d2.utils.events]: [0m eta: 0:08:37  iter: 3219  total_loss: 0.079  loss_cls: 0.056  loss_box_reg: 0.032  time: 0.2947  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:41:15 d2.utils.events]: [0m eta: 0:08:31  iter: 3239  total_loss: 0.068  loss_cls: 0.038  loss_box_reg: 0.034  time: 0.2947  data_time: 0.0039  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:41:21 d2.utils.events]: [0m eta: 0:08:25  iter: 3259  total_loss: 0.127  loss_cls: 0.072  loss_box_reg: 0.060  time: 0.2947  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:41:27 d2.utils.events]: [0m eta: 0:08:20  iter: 3279  total_loss: 0.082  loss_cls: 0.044  loss_box_reg: 0.040  time: 0.2947  data_time: 0.0040  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:41:32 d2.utils.events]: [0m eta: 0:08:14  iter: 3299  total_loss: 0.095  loss_cls: 0.048  loss_box_reg: 0.038  time: 0.2947  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:41:38 d2.utils.events]: [0m eta: 0:08:08  iter: 3319  total_loss: 0.083  loss_cls: 0.051  loss_box_reg: 0.031  time: 0.2947  data_time: 0.0040  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:41:44 d2.utils.events]: [0m eta: 0:08:02  iter: 3339  total_loss: 0.074  loss_cls: 0.044  loss_box_reg: 0.038  time: 0.2948  data_time: 0.0039  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:41:50 d2.utils.events]: [0m eta: 0:07:57  iter: 3359  total_loss: 0.087  loss_cls: 0.049  loss_box_reg: 0.041  time: 0.2948  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:41:56 d2.utils.events]: [0m eta: 0:07:51  iter: 3379  total_loss: 0.060  loss_cls: 0.040  loss_box_reg: 0.031  time: 0.2948  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:42:02 d2.utils.events]: [0m eta: 0:07:45  iter: 3399  total_loss: 0.117  loss_cls: 0.063  loss_box_reg: 0.053  time: 0.2948  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:42:08 d2.utils.events]: [0m eta: 0:07:39  iter: 3419  total_loss: 0.102  loss_cls: 0.052  loss_box_reg: 0.038  time: 0.2948  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:42:14 d2.utils.events]: [0m eta: 0:07:34  iter: 3439  total_loss: 0.102  loss_cls: 0.061  loss_box_reg: 0.048  time: 0.2948  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:42:20 d2.utils.events]: [0m eta: 0:07:28  iter: 3459  total_loss: 0.113  loss_cls: 0.069  loss_box_reg: 0.044  time: 0.2948  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:42:26 d2.utils.events]: [0m eta: 0:07:22  iter: 3479  total_loss: 0.072  loss_cls: 0.040  loss_box_reg: 0.038  time: 0.2948  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:42:32 d2.utils.events]: [0m eta: 0:07:16  iter: 3499  total_loss: 0.091  loss_cls: 0.049  loss_box_reg: 0.046  time: 0.2948  data_time: 0.0040  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:42:38 d2.utils.events]: [0m eta: 0:07:10  iter: 3519  total_loss: 0.091  loss_cls: 0.056  loss_box_reg: 0.030  time: 0.2948  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:42:44 d2.utils.events]: [0m eta: 0:07:05  iter: 3539  total_loss: 0.097  loss_cls: 0.047  loss_box_reg: 0.043  time: 0.2948  data_time: 0.0043  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:42:50 d2.utils.events]: [0m eta: 0:06:59  iter: 3559  total_loss: 0.094  loss_cls: 0.054  loss_box_reg: 0.046  time: 0.2948  data_time: 0.0040  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:42:55 d2.utils.events]: [0m eta: 0:06:53  iter: 3579  total_loss: 0.095  loss_cls: 0.051  loss_box_reg: 0.038  time: 0.2948  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:43:01 d2.utils.events]: [0m eta: 0:06:47  iter: 3599  total_loss: 0.164  loss_cls: 0.082  loss_box_reg: 0.064  time: 0.2948  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:43:07 d2.utils.events]: [0m eta: 0:06:41  iter: 3619  total_loss: 0.097  loss_cls: 0.057  loss_box_reg: 0.039  time: 0.2948  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:43:13 d2.utils.events]: [0m eta: 0:06:35  iter: 3639  total_loss: 0.135  loss_cls: 0.074  loss_box_reg: 0.054  time: 0.2949  data_time: 0.0043  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:43:19 d2.utils.events]: [0m eta: 0:06:30  iter: 3659  total_loss: 0.097  loss_cls: 0.057  loss_box_reg: 0.054  time: 0.2948  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:43:25 d2.utils.events]: [0m eta: 0:06:24  iter: 3679  total_loss: 0.140  loss_cls: 0.078  loss_box_reg: 0.059  time: 0.2949  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:43:31 d2.utils.events]: [0m eta: 0:06:18  iter: 3699  total_loss: 0.111  loss_cls: 0.055  loss_box_reg: 0.055  time: 0.2949  data_time: 0.0040  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:43:37 d2.utils.events]: [0m eta: 0:06:12  iter: 3719  total_loss: 0.124  loss_cls: 0.061  loss_box_reg: 0.045  time: 0.2949  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:43:43 d2.utils.events]: [0m eta: 0:06:06  iter: 3739  total_loss: 0.100  loss_cls: 0.067  loss_box_reg: 0.039  time: 0.2949  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:43:49 d2.utils.events]: [0m eta: 0:06:01  iter: 3759  total_loss: 0.097  loss_cls: 0.054  loss_box_reg: 0.040  time: 0.2949  data_time: 0.0043  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:43:55 d2.utils.events]: [0m eta: 0:05:55  iter: 3779  total_loss: 0.080  loss_cls: 0.046  loss_box_reg: 0.039  time: 0.2949  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:44:01 d2.utils.events]: [0m eta: 0:05:49  iter: 3799  total_loss: 0.104  loss_cls: 0.057  loss_box_reg: 0.047  time: 0.2949  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:44:07 d2.utils.events]: [0m eta: 0:05:43  iter: 3819  total_loss: 0.093  loss_cls: 0.055  loss_box_reg: 0.042  time: 0.2949  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:44:13 d2.utils.events]: [0m eta: 0:05:37  iter: 3839  total_loss: 0.121  loss_cls: 0.071  loss_box_reg: 0.051  time: 0.2949  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:44:19 d2.utils.events]: [0m eta: 0:05:32  iter: 3859  total_loss: 0.077  loss_cls: 0.041  loss_box_reg: 0.034  time: 0.2949  data_time: 0.0040  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:44:24 d2.utils.events]: [0m eta: 0:05:26  iter: 3879  total_loss: 0.110  loss_cls: 0.052  loss_box_reg: 0.042  time: 0.2949  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:44:30 d2.utils.events]: [0m eta: 0:05:20  iter: 3899  total_loss: 0.074  loss_cls: 0.047  loss_box_reg: 0.029  time: 0.2949  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:44:36 d2.utils.events]: [0m eta: 0:05:14  iter: 3919  total_loss: 0.104  loss_cls: 0.059  loss_box_reg: 0.046  time: 0.2949  data_time: 0.0040  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:44:42 d2.utils.events]: [0m eta: 0:05:08  iter: 3939  total_loss: 0.080  loss_cls: 0.048  loss_box_reg: 0.035  time: 0.2949  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:44:48 d2.utils.events]: [0m eta: 0:05:02  iter: 3959  total_loss: 0.099  loss_cls: 0.052  loss_box_reg: 0.050  time: 0.2949  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:44:54 d2.utils.events]: [0m eta: 0:04:57  iter: 3979  total_loss: 0.100  loss_cls: 0.055  loss_box_reg: 0.036  time: 0.2950  data_time: 0.0050  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:45:00 d2.utils.events]: [0m eta: 0:04:51  iter: 3999  total_loss: 0.124  loss_cls: 0.066  loss_box_reg: 0.060  time: 0.2950  data_time: 0.0050  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:45:06 d2.utils.events]: [0m eta: 0:04:45  iter: 4019  total_loss: 0.086  loss_cls: 0.046  loss_box_reg: 0.041  time: 0.2950  data_time: 0.0038  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:45:12 d2.utils.events]: [0m eta: 0:04:39  iter: 4039  total_loss: 0.084  loss_cls: 0.052  loss_box_reg: 0.039  time: 0.2950  data_time: 0.0040  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:45:18 d2.utils.events]: [0m eta: 0:04:34  iter: 4059  total_loss: 0.089  loss_cls: 0.043  loss_box_reg: 0.035  time: 0.2949  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:45:24 d2.utils.events]: [0m eta: 0:04:28  iter: 4079  total_loss: 0.115  loss_cls: 0.063  loss_box_reg: 0.057  time: 0.2949  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:45:30 d2.utils.events]: [0m eta: 0:04:22  iter: 4099  total_loss: 0.080  loss_cls: 0.048  loss_box_reg: 0.033  time: 0.2950  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:45:36 d2.utils.events]: [0m eta: 0:04:16  iter: 4119  total_loss: 0.102  loss_cls: 0.057  loss_box_reg: 0.047  time: 0.2950  data_time: 0.0039  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:45:42 d2.utils.events]: [0m eta: 0:04:11  iter: 4139  total_loss: 0.097  loss_cls: 0.054  loss_box_reg: 0.038  time: 0.2950  data_time: 0.0041  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:45:48 d2.utils.events]: [0m eta: 0:04:05  iter: 4159  total_loss: 0.090  loss_cls: 0.045  loss_box_reg: 0.045  time: 0.2950  data_time: 0.0040  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:45:53 d2.utils.events]: [0m eta: 0:03:59  iter: 4179  total_loss: 0.079  loss_cls: 0.046  loss_box_reg: 0.035  time: 0.2950  data_time: 0.0039  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:45:59 d2.utils.events]: [0m eta: 0:03:53  iter: 4199  total_loss: 0.093  loss_cls: 0.049  loss_box_reg: 0.044  time: 0.2949  data_time: 0.0040  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:46:05 d2.utils.events]: [0m eta: 0:03:47  iter: 4219  total_loss: 0.103  loss_cls: 0.046  loss_box_reg: 0.037  time: 0.2949  data_time: 0.0040  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:46:11 d2.utils.events]: [0m eta: 0:03:41  iter: 4239  total_loss: 0.092  loss_cls: 0.053  loss_box_reg: 0.035  time: 0.2949  data_time: 0.0035  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:46:17 d2.utils.events]: [0m eta: 0:03:35  iter: 4259  total_loss: 0.114  loss_cls: 0.064  loss_box_reg: 0.035  time: 0.2949  data_time: 0.0039  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:46:23 d2.utils.events]: [0m eta: 0:03:29  iter: 4279  total_loss: 0.071  loss_cls: 0.045  loss_box_reg: 0.024  time: 0.2949  data_time: 0.0039  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:46:28 d2.utils.events]: [0m eta: 0:03:24  iter: 4299  total_loss: 0.081  loss_cls: 0.047  loss_box_reg: 0.036  time: 0.2949  data_time: 0.0037  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:46:35 d2.utils.events]: [0m eta: 0:03:18  iter: 4319  total_loss: 0.082  loss_cls: 0.041  loss_box_reg: 0.036  time: 0.2949  data_time: 0.0037  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:46:40 d2.utils.events]: [0m eta: 0:03:12  iter: 4339  total_loss: 0.114  loss_cls: 0.065  loss_box_reg: 0.047  time: 0.2949  data_time: 0.0038  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:46:46 d2.utils.events]: [0m eta: 0:03:06  iter: 4359  total_loss: 0.072  loss_cls: 0.039  loss_box_reg: 0.031  time: 0.2949  data_time: 0.0040  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:46:52 d2.utils.events]: [0m eta: 0:03:00  iter: 4379  total_loss: 0.094  loss_cls: 0.048  loss_box_reg: 0.046  time: 0.2949  data_time: 0.0038  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:46:58 d2.utils.events]: [0m eta: 0:02:55  iter: 4399  total_loss: 0.103  loss_cls: 0.054  loss_box_reg: 0.053  time: 0.2949  data_time: 0.0038  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:47:04 d2.utils.events]: [0m eta: 0:02:49  iter: 4419  total_loss: 0.100  loss_cls: 0.062  loss_box_reg: 0.036  time: 0.2949  data_time: 0.0038  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:47:10 d2.utils.events]: [0m eta: 0:02:43  iter: 4439  total_loss: 0.086  loss_cls: 0.053  loss_box_reg: 0.037  time: 0.2949  data_time: 0.0036  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:47:16 d2.utils.events]: [0m eta: 0:02:37  iter: 4459  total_loss: 0.069  loss_cls: 0.038  loss_box_reg: 0.032  time: 0.2949  data_time: 0.0042  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:47:22 d2.utils.events]: [0m eta: 0:02:31  iter: 4479  total_loss: 0.087  loss_cls: 0.045  loss_box_reg: 0.044  time: 0.2949  data_time: 0.0040  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:47:28 d2.utils.events]: [0m eta: 0:02:25  iter: 4499  total_loss: 0.092  loss_cls: 0.046  loss_box_reg: 0.038  time: 0.2949  data_time: 0.0039  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:47:34 d2.utils.events]: [0m eta: 0:02:20  iter: 4519  total_loss: 0.098  loss_cls: 0.055  loss_box_reg: 0.048  time: 0.2949  data_time: 0.0038  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:47:39 d2.utils.events]: [0m eta: 0:02:14  iter: 4539  total_loss: 0.090  loss_cls: 0.044  loss_box_reg: 0.041  time: 0.2949  data_time: 0.0037  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:47:45 d2.utils.events]: [0m eta: 0:02:08  iter: 4559  total_loss: 0.111  loss_cls: 0.058  loss_box_reg: 0.052  time: 0.2949  data_time: 0.0037  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:47:51 d2.utils.events]: [0m eta: 0:02:02  iter: 4579  total_loss: 0.059  loss_cls: 0.035  loss_box_reg: 0.028  time: 0.2949  data_time: 0.0037  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:47:57 d2.utils.events]: [0m eta: 0:01:56  iter: 4599  total_loss: 0.102  loss_cls: 0.056  loss_box_reg: 0.046  time: 0.2949  data_time: 0.0039  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:48:03 d2.utils.events]: [0m eta: 0:01:50  iter: 4619  total_loss: 0.073  loss_cls: 0.041  loss_box_reg: 0.032  time: 0.2949  data_time: 0.0038  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:48:09 d2.utils.events]: [0m eta: 0:01:45  iter: 4639  total_loss: 0.081  loss_cls: 0.045  loss_box_reg: 0.035  time: 0.2949  data_time: 0.0037  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:48:15 d2.utils.events]: [0m eta: 0:01:39  iter: 4659  total_loss: 0.103  loss_cls: 0.058  loss_box_reg: 0.045  time: 0.2949  data_time: 0.0037  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:48:21 d2.utils.events]: [0m eta: 0:01:33  iter: 4679  total_loss: 0.130  loss_cls: 0.069  loss_box_reg: 0.061  time: 0.2949  data_time: 0.0037  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:48:27 d2.utils.events]: [0m eta: 0:01:27  iter: 4699  total_loss: 0.061  loss_cls: 0.033  loss_box_reg: 0.030  time: 0.2949  data_time: 0.0037  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:48:32 d2.utils.events]: [0m eta: 0:01:21  iter: 4719  total_loss: 0.063  loss_cls: 0.034  loss_box_reg: 0.030  time: 0.2949  data_time: 0.0038  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:48:38 d2.utils.events]: [0m eta: 0:01:15  iter: 4739  total_loss: 0.076  loss_cls: 0.044  loss_box_reg: 0.038  time: 0.2949  data_time: 0.0036  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:48:44 d2.utils.events]: [0m eta: 0:01:10  iter: 4759  total_loss: 0.066  loss_cls: 0.036  loss_box_reg: 0.029  time: 0.2949  data_time: 0.0038  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:48:50 d2.utils.events]: [0m eta: 0:01:04  iter: 4779  total_loss: 0.069  loss_cls: 0.033  loss_box_reg: 0.036  time: 0.2949  data_time: 0.0038  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:48:56 d2.utils.events]: [0m eta: 0:00:58  iter: 4799  total_loss: 0.101  loss_cls: 0.057  loss_box_reg: 0.046  time: 0.2949  data_time: 0.0035  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:49:02 d2.utils.events]: [0m eta: 0:00:52  iter: 4819  total_loss: 0.060  loss_cls: 0.031  loss_box_reg: 0.026  time: 0.2949  data_time: 0.0040  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:49:08 d2.utils.events]: [0m eta: 0:00:46  iter: 4839  total_loss: 0.103  loss_cls: 0.046  loss_box_reg: 0.049  time: 0.2949  data_time: 0.0039  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:49:14 d2.utils.events]: [0m eta: 0:00:40  iter: 4859  total_loss: 0.075  loss_cls: 0.039  loss_box_reg: 0.033  time: 0.2949  data_time: 0.0035  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:49:20 d2.utils.events]: [0m eta: 0:00:35  iter: 4879  total_loss: 0.085  loss_cls: 0.049  loss_box_reg: 0.037  time: 0.2949  data_time: 0.0038  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:49:26 d2.utils.events]: [0m eta: 0:00:29  iter: 4899  total_loss: 0.098  loss_cls: 0.046  loss_box_reg: 0.044  time: 0.2949  data_time: 0.0037  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:49:32 d2.utils.events]: [0m eta: 0:00:23  iter: 4919  total_loss: 0.073  loss_cls: 0.037  loss_box_reg: 0.025  time: 0.2949  data_time: 0.0038  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:49:38 d2.utils.events]: [0m eta: 0:00:17  iter: 4939  total_loss: 0.060  loss_cls: 0.033  loss_box_reg: 0.028  time: 0.2949  data_time: 0.0039  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:49:44 d2.utils.events]: [0m eta: 0:00:11  iter: 4959  total_loss: 0.081  loss_cls: 0.045  loss_box_reg: 0.028  time: 0.2949  data_time: 0.0037  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:49:49 d2.utils.events]: [0m eta: 0:00:06  iter: 4979  total_loss: 0.096  loss_cls: 0.047  loss_box_reg: 0.046  time: 0.2949  data_time: 0.0038  lr: 0.000250  max_mem: 2879M
Loading sequence 0002
Loading sequence 0006
Loading sequence 0007
Loading sequence 0008
Loading sequence 0010
Loading sequence 0013
Loading sequence 0014
Loading sequence 0016
Loading sequence 0018
0002
0006
0007
0008
0010
0013
0014
0016
0018
Loaded 2920 images!
[32m[03/15 13:50:20 d2.data.build]: [0mDistribution of instances among all 3 categories:
[36m|  category  | #instances   |  category  | #instances   |  category  | #instances   |
|:----------:|:-------------|:----------:|:-------------|:----------:|:-------------|
|    None    | 0            |    Car     | 8029         | Pedestrian | 3347         |
|            |              |            |              |            |              |
|   total    | 11376        |            |              |            |              |[0m
[32m[03/15 13:50:20 d2.data.common]: [0mSerializing 2920 elements to byte tensors and concatenating them all ...
[32m[03/15 13:50:20 d2.data.common]: [0mSerialized dataset takes 1.86 MiB
[5m[31mWARNING[0m [32m[03/15 13:50:20 d2.engine.defaults]: [0mNo evaluator found. Use `DefaultTrainer.test(evaluators=)`, or implement its `build_evaluator` method.
[32m[03/15 13:50:20 d2.utils.events]: [0m eta: 0:00:00  iter: 4999  total_loss: 0.073  loss_cls: 0.054  loss_box_reg: 0.029  time: 0.2949  data_time: 0.0038  lr: 0.000250  max_mem: 2879M
[32m[03/15 13:50:20 d2.engine.hooks]: [0mOverall training speed: 4997 iterations in 0:24:33 (0.2950 s / it)
[32m[03/15 13:50:20 d2.engine.hooks]: [0mTotal training time: 0:25:07 (0:00:33 on hooks)
Loading sequence 0002
Loading sequence 0006
Loading sequence 0007
Loading sequence 0008
Loading sequence 0010
Loading sequence 0013
Loading sequence 0014
Loading sequence 0016
Loading sequence 0018
0002
0006
0007
0008
0010
0013
0014
0016
0018
Loaded 2920 images!
